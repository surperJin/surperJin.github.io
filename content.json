{"pages":[{"title":"","text":"&ensp;前端 ▪ 前端工程规范 ▪ 开源中国 ▪ 凹凸实验室 ▪ 百度EUX ▪ 前端开发资源库 &ensp;设计类 ▪ 免费可商用图库 pixitepixabayunsplashfoodiesfeed（美食图片）picjumbolifeofpix（高分辨率摄影图）gratisography（搞怪风格）stocksnap ▪ 视频素材(免费可商用) ▪ 音频素材(免费可商用) ▪ 图片压缩工具 ▪ 书法字典网 ▪ 2.5D风格矢量插画 ▪ 扁平化风格插画 ▪ 开源插画素材1 ▪ 开源插画素材2 ▪ 免费插画素材库 ▪ 免费扁平元素 ▪ 免费404页面插画素材库 &ensp;图标 ▪ tilda ▪ iconfont ▪ icomoon ▪ iconfinder ▪ icons8 ▪ fontawesome ▪ Ikonate","link":"/resource/index.html"},{"title":"","text":"&ensp;一些我热爱的东西","link":"/arts/index.html"},{"title":"","text":"&ensp;拍我所见 📸更多摄影作品看这里：jinzhanqi.tuchong.com","link":"/album/index.html"},{"title":"","text":"About blog ◾ &ensp;初次建立于2019年4月26日◾ &ensp;记录问题，分享心得 GitHub◾ &ensp;https://github.com/surperJin Contact &amp; Social ◾ &ensp;邮箱：willjin007@163.com◾ &ensp;微信：jzq1734◾ &ensp;图虫（摄影作品集）：https://jinzhanqi.tuchong.com Job hunting ◾ &ensp;工作联系请看简历&ensp;点击下载简历","link":"/about/index.html"}],"posts":[{"title":"2019总结-2020计划清单","text":"2019工作/学习： 坚持笔记 巩固知识 生活/旅行： 坚持跑步 多出去走走，不死宅 深圳、香港 张家界 2020工作/学习： 每周强制性做一次技术总结 坚持笔记 生活/旅行： 健身、增肌","link":"/2019/12/30/2019summary/"},{"title":"2020总结-2021计划清单","text":"2020工作/学习： 每周强制性做一次技术总结 坚持笔记 健身、增肌 2021工作/学习： 学习Typescript 2个开源项目 通过计算机软件考试 改掉拖延症的毛病 生活/旅行： 健身","link":"/2020/12/29/2020summary/"},{"title":"麦理浩径","text":"&emsp;&emsp;体验评分：⭐⭐⭐⭐⭐+&emsp;&emsp;国庆博主去香港玩了几天，在这个“非常时期”去香港，我是真的心大。😂&emsp;&emsp;虽然在市区遇到了gang du在暴动，但是麦理浩径沿途的风景丝毫不会影响影响你的心情，它是真的不会让人失望。 事先准备（必须）：香港电话卡、八达通、港澳通行证、带300左右现金港币徒步装备：&gt;50升的背包、帐篷、防潮垫、睡袋、水、干粮、登山杖、灯、一身运动装路线：路线我就不细说了因为可以根据导航走，坐了N趟大巴，单程大致花了4个小时 1.从深圳出发，去往最近的口岸。 2.到达香港，换上手机卡，导航至黄石码头。这个时候可以休息一下吃点东西，另外个人感觉车仔面并不是很好吃…… 3.塔门岛Glass Island，位于香港东北的一个岛屿。塔门岛的风景很好，你想要的的蓝天、草坪、大海、牛群，壮丽日出，唯美日落，渔家风情，都在这里。 4.咸田湾。走麦理浩径第二段去往咸田湾，西贡咸田湾是深港澳后花园，这里碧水蓝天，水清沙幼完全可以比拼普吉岛。在这里露营可以很好的感受到人与自然的和谐，风景优美，游客较少，牛儿们吃饱了就来沙滩睡在人们的附近，非常和谐。很遗憾没去到过西湾和万宜水库，有机会还会去一次😎","link":"/2019/10/07/MaclehoseTrail/"},{"title":"手把手教你实现uni-app项目的搭建到发布","text":"一、预先准备 注册uniCloud账号，点击这里了解什么是uniCloud。 下载HBuilder X编辑器。 下载微信开发者工具 注册成为微信小程序开发者 二、了解2.1 uni-app规范 页面文件遵循 Vue单文件规范 组件标签靠近小程序标签 接口能力（JS API）靠近微信小程序规范 数据绑定及事件处理通Vue.js规范 为兼容多端运行，建议使用flex布局进行开发 2.2 uni-app特色条件编译（ifdef 显示、ifndef 不显示） APP-PLUS App APP-PLUS-NVUE或APP-NVUE App nvue H5 H5 MP-WEIXIN 微信小程序 MP-ALIPAY 支付宝小程序 MP-BAIDU 百度小程序 MP-TOUTIAO 字节跳动小程序 MP-QQ QQ小程序 MP 微信小程序/支付宝小程序/百度小程序/字节跳动小程序/QQ小程序/360小程序 QUICKAPP-WEBVIEW 快应用通用(包含联盟、华为) QUICKAPP-WEBVIEW-UNION 快应用联盟 QUICKAPP-WEBVIEW-HUAWEI 快应用华为 示例：以下代码只有在微信小程序端展示123&lt;!-- #ifdef MP-WEIXIN --&gt;&lt;view v-show=\"!SwiperPictureShow\" style=\"height: 20px;\"&gt;&lt;/view&gt;&lt;!-- #endif --&gt; 2.3 uni-app组件在uni-app项目里，是没有&lt;div&gt;、&lt;span&gt;……这些标签的，取而代之的是&lt;view&gt;、&lt;text&gt;、&lt;image&gt;这些它自带的标签。传送门 2.4 生命周期应用生命周期 函数名 说明 onLaunch 当uni-app初始化完成时触发（全局只触发一次） onShow 当uni-app启动，或从后台进入前台显示 onHide 当uni-app从前台进入后台 onError 当uni-app报错时触发 onUniNViewMessage 对nvue页面发送的数据进行监听 onUnhandledRejection 对未处理的Promise拒绝事件监听函数 onPageNotFound 页面不存在监听函数 onThemeChange 监听系统主题变化 页面生命周期查看这里组件生命周期跟Vue生命周期是一样的 三、项目初始化3.1 使用HBuilder X 新建项目在编辑器里新建项目非常方便，不要忘记勾选“启用uniCloud”。 3.2 使用vue-cli安装项目 首先全局安装 npm install @vue/cli -g 新建文件夹，在文件夹中 vue create -p dcloudio/uni-preset-vue 项目名 运行： npm run serve 但是还是推荐第一种方式新建项目，因为HBuilder X对uni-app的支持度是非常高的，可以快速搭建项目。 四、介绍项目目录和文件作用 pages.json文件用来对 uni-app 进行全局配置，决定页面文件的路径、窗口样式、原生的导航栏、底部的原生tabbar 等 manifest.json文件是应用的配置文件，用于指定应用的名称、图标、权限等。 App.vue是我们的跟组件，所有页面都是在App.vue下进行切换的，是页面入口文件，可以调用应用的生命周期函数。 main.js是我们的项目入口文件，主要作用是初始化vue实例并使用需要的插件。 uni.scss文件的用途是为了方便整体控制应用的风格。比如按钮颜色、边框风格，uni.scss文件里预置了一批scss变量预置。 unpackage就是打包目录，在这里有各个平台的打包文件 pages所有的页面存放目录 static静态资源目录，例如图片等 components组件存放目录 五、基本配置5.1 在初始化项目后，需要鼠标右击“uniCloud”文件夹，关联相应云服务空间如果没有云服务空间，我们需要新建一个。 5.2 这时候，我们可以在根目录下新建components、static文件夹就可以开发了页面文件遵循Vue文件规范，components将存放所有组件文件（从插件市场导入到项目内的插件都会在这个文件夹内），static存放静态文件。 5.3 根目录下的manifest.json文件需要配置AppID 5.4 微信小程序配置将项目运行到微信小程序，这时候会自动弹出微信开发者工具终端。这时一定要配置终端右上角的“详情”，如果不配置，你看到的是“版本管理”按钮，而不是“上传”按钮，这将影响后续的发布工作。 六、开发6.1 数据绑定及事件处理通Vue.js规范6.2 数据从哪里来？当我们关联云服务空间之后，可以在文件夹uniCloud -&gt; database，右击database，创建db_init.json。在db_init.json文件夹下去配置我们的数据。需要注意的是，这里的格式严格按照json格式，必须使用双引号。你的数据mydataList需要有个data包含在里面。123456789{ \"mydataList\": { \"data\": [ {\"name\": \"1\"}, {\"name\": \"2\"}, {\"name\": \"3\"} ] }} 然后右击db_init.json文件夹初始化云数据库，这样我们就在云服务空间的云数据库里能看到我们刚才上传的数据了，在需要的时候再从云服务空间调取数据就可以了。 6.3 云函数的编写云函数的作用就相当于客户端和云服务空间的中介，客户端调用并传参给云函数，云函数再从云服务空间拿数据，再通过云函数返回给客户端，这时候客户端就可以使用这些数据去渲染界面了。 6.3.1 云数据库获取数据在文件夹uniCloud -&gt; cloudfunctions，右击新建云函数get_mydataList12345678910111213'use strict';const db = uniCloud.database()exports.main = async (event, context) =&gt; { // 这里的mydataList是云服务空间里数据表名 let mydataList = await db.collection('mydataList').get() //返回数据给客户端 return { code: 200, msg: '请求成功！', data: mydataList.data }}; 6.3.2 客户端调用云函数写在方法里12345uniCloud.callFunction({ name: get_mydataList, //这里是传参，传云函数的名称}).then((res)=&gt;{ console.log(res);}) 更多云函数API看这里 七、发布7.1 发行微信小程序在本篇第一点提到，注册成为微信小程序开发者之后，就能在“开发管理”的开发者ID这一项看到AppID(小程序ID)。在根目录下的manifest.json文件配置AppID，然后点击发行 -&gt; 小程序-微信。如果弹出的微信小程序终端控制台报错http:.....不在以下 request 合法域名列表中，那么需要在“开发管理”的服务器域名将这个报错的域名配置到里面，再回到微信小程序终端重新编译下，报错就消失了。下一步就是点击右上角的“上传”按钮，就能在版本管理的开发版本中看到自己刚刚上传的项目。此时的版本为体验版，可以用微信扫码查看项目了，查看人数是有限制的（15人）。 7.2 发行h5端 八、遇到的坑8.1 跳转页面需求：从组件跳转到页面（文件夹：components/某个组件 -&gt; pages/某个页面）12345678910//目录结构 components(文件夹) search(文件夹) search.vue pages(文件夹) home(文件夹) home.vue article(文件夹) article.vue 根据官网API，我们可以使用：123uni.navigateTo({ url: '../pages/article/article'}) 但是这是跳转不了的，需要这样写：123uni.navigateTo({ url: '../article/article'}) （本文为博主原创文章，转载请附上博文链接！）","link":"/2021/06/08/create-uni-app-project/"},{"title":"如何搭建属于自己的个人网站","text":"一、前期准备1.全局安装node.js、git安装完测试下。在其他盘能不能查到版本号。 $npm install nrm -g --save nrm是专门用来管理和快速切换私人配置的registry，切换npm下载源。 $nrm ls 用nrm ls命令查看默认配置 $nrm use taobao 使用淘宝镜像作为默认源 2.注册github账号3.在GitHub上新建一个仓库注意：仓库名一定要写成：用户名.github.io（博主在注册账号时把super拼错了，这一点上，不要笑话我~） 二、配置 SSH keys1.首先我们需要检查你电脑上现有的 ssh key：$ cd ~/.ssh //检查本机的ssh密钥 如果提示：No such file or directory 说明你是第一次使用 git。 2.在本地电脑上创建ssh公钥与密钥。$ ssh-keygen -t rsa -C &quot;邮件地址@youremail.com&quot; 然后连续按3次空格，跳过输入密码在本地会生成一个.ssh文件夹：C盘用户文件夹下 3.设置用户信息$git config --global user.name &quot;surperJin&quot; //名字随便 $git config --global user.email &quot;willjin007@163.com&quot; //邮箱 打开id_rsa.pub文件，并复制里面的内容到GitHub的SSH keys里面测试一下本地是否连接远端 $ssh -T &quot;git@github.com&quot; 三、Hexohexo是一款基于Node.js的静态博客框架。 1.全局安装hexo$npm install hexo-cli -g $npm install hexo-deployer -git -save 2.D盘创建文件夹“blog”（文件夹名字自己定，最好是英文），进入D盘输入以下指令：$hexo init blog $npm install 打开并配置_config.yml文件 $hexo g //生成静态 $hexo server //可以在http://localhost:4000/ 查看 $hexo d //部署 四、绑定域名1.购买域名博主是在新网买的，不过大家可以去阿里云购买，好像更便宜一些买到域名后要进行实名认证，通过后进行以下操作：a. （win键+R）输入cmd打开系统命令执行程序 ping 用户名.github.io 可以得到GitHub的IP，复制b. 解析域名c. 添加CNAME和A记录（把刚才GitHub的IP填到A记录的记录值）d. 在source文件夹下新建一个CNAME文件（没有后缀名），并把域名填入，不带www 五、开启HTTPS在GitHub上找到刚建的那个博客仓库，进入设置并找到GitHub Pages，把这个打上勾就可以了。 六、更换主题hexo主题可以去这里找：https://hexo.io/themes/主题配置可以参考hexo主题配置以及挑选的主题的README.md此项配置于博客名文件夹下的_config.yml，具体的主题内容以及样式于themes/主题文件夹/_config.yml 七、新建菜单页以及文章hexo new &quot;文章名称&quot; 建好后会产生一个md文件（markdown语法），一般在hexo/source/_posts下，用编辑器打开在里面输入你想写的内容就好啦 hexo new page about 八、markdown语法Markdown是一种可以使用普通文本编辑器编写的标记语言，通过简单的标记语法，它可以使普通文本内容具有一定的格式。 1.标题在想要设置为标题的文字前面加#来表示一个#是一级标题，二个#是二级标题，以此类推。支持六级标题。 注：标准语法一般在#后跟个空格再写文字，貌似简书不加空格也行。 #一级标题 ##二级标题 ###三级标题 ####四级标题 #####五级标题 ######六级标题 效果如下： 一级标题二级标题三级标题四级标题五级标题六级标题2.引用图片![这里面是替换图片的文字]（这里是图片的路径.jpg） 太多了，不想写了🤣，你们可以参考我好朋友的这篇markdown语法的文章https://xpoet.cn/2017/10/%E5%BF%AB%E9%80%9F%E6%8E%8C%E6%8F%A1Markdown%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/ （本文为博主原创文章，转载请附上博文链接！）https://jinzhanqi.com/2019/04/25/createBlog/","link":"/2019/04/25/createBlog/"},{"title":"Vue + Element 怎么画复杂的表格？","text":"一、需求1. 如下图所示，横竖两个表头，paihao_jyj、paihao_fsj表头名称和中间那些值为动态数据，a1、a2…和f1、f13以及1、2、3、4…都是固定死的。 2. 行、列相交的单元格是相连的，会给出对应的值，根据对应的值给出对应的颜色。（红：断开 黑：维持原来连着的不变 绿：新连）3. 解释第2点，在表中，“0”表示空，没有值，不展示任何颜色；260-a1-2和260-f13-4相连，颜色为黑色。4. 当鼠标悬停在连接点时会出现气泡确认框进行“断开”、“连接”操作。 二、思路1. 本次使用的是element ui，写多级表头，只需要在 el-table-column 里面嵌套 el-table-column，就可以实现。（先不管合并单元格）2. element里并没有垂直表头，所以我们作为列插入值也一样能达到效果。3. 跟后端工程师定好接口返回的数据结构，这一点尤为重要！123456789101112131415161718{/*这是我们定好的表头接口数据结构*/fdCode: \"LBCX2600\"fdName: \"120长嘴滤棒（260）A\"jyjFsgArr: [\"1\", \"2\", \"3\", \"4\"]jyjName: \"A01\"}{/*这是我们定好的表格值（连接点）接口数据结构*//*该条数据表示：F02-3跟A05-1相连，连接点状态为1，id为ce91c9f9c42b4864a898671868f010a3*/connectList: [\"A05-1-1-ce91c9f9c42b4864a898671868f010a3\"]fdCode: \"LBCX2600\"fdName: \"120长嘴滤棒（260）A\"fsjFsg: \"F02-3\"fsjFsgNo: \"3\"fsjName: \"F02\"} 4. 数据处理。 三、实现1. 模拟数据1234567891011121314151617181920212223242526272829303132333435&lt;el-table :key=&quot;tableKey&quot; v-loading=&quot;loading&quot; :data=&quot;lbpcResultList&quot; border fit highlight-current-row class=&quot;ahopeTable&quot; style=&quot;width: 100%;margin-top:5px;&quot;&gt; &lt;el-table-column label=&quot;发射机（排号）&quot; width=&quot;100&quot; prop=&quot;fsjName&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt; &lt;el-table-column label=&quot;编号&quot; width=&quot;70&quot; prop=&quot;code_fsj&quot; align=&quot;center&quot;&gt;&lt;/el-table-column&gt; &lt;el-table-column label=&quot;卷烟机牌号&quot; align=&quot;center&quot;&gt; &lt;el-table-column v-for=&quot;(item,index) in jyjName&quot; :label=&quot;item.name&quot; :key=&quot;index&quot; width=&quot;70&quot; align=&quot;center&quot;&gt; &lt;el-table-column :label=&quot;item.code&quot; align=&quot;center&quot;&gt; &lt;el-table-column v-for=&quot;(items,index) in item.col&quot; :label=&quot;items&quot; :key=&quot;index&quot; width=&quot;50&quot; align=&quot;center&quot;&gt; &lt;template slot-scope=&quot;scope&quot;&gt; &lt;div class=&quot;insertContent&quot; :class=&quot;{ holdClass:scope.row[`${item.code}-${items}`] ===&apos;1&apos; , offClass:scope.row[`${item.code}-${items}`] ===&apos;0&apos; , linkClass:scope.row[`${item.code}-${items}`] ===&apos;2&apos; , }&quot;&gt; {{scope.row[`${item.code}-${items}`]}} &lt;/div&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table-column&gt; &lt;/el-table-column&gt; &lt;/el-table-column&gt;&lt;/el-table&gt; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546export default { data(){ return{ jyjName:[ { name:'260', code:'A01', col: ['1','2','3','4'], }, { name:'260', code:'A02', col: ['1','2','3','4'], }, { name:'100P', code:'A03', col: ['1','2','3','4'], }, { name:'100P', code:'A04', col: ['1','2','3','4'], }, ], lbpcResultList:[ { paihao_fsj:'100G', fsj: 'F1', code_fsj: '1', paihao_jyj: '260', connectList: ['A01-1-0','A02-4-2'], // 'A01-1':0, // 'A02-4':2, }, { paihao_fsj:'100G', fsj: 'F1', code_fsj: '2', paihao_jyj: '260', connectList: ['A03-4-2'], }, ], } }} 1234567891011this.lbpcResultList = this.lbpcResultList.map(o=&gt;{ let obj = {} o.connectList.forEach(v=&gt;{ let arr = v.split('-') obj[`${arr[0]}-${arr[1]}`] = arr[2] obj[`${arr[0]}-${arr[1]}-id`] = arr[3] }) o.fsjName = o.fsj+'（'+o.paihao_fsj+'）'; Object.assign(o,obj) //对象合并 return o}) 123456789101112131415161718.insertContent{ width: 78%; height: 100%; margin-left: 4px; border-radius: 20px;}.holdClass{ background-color: #161918; color: #161918;}.offClass{ background-color: #ea2528; color: #ea2528;}.linkClass{ background-color: #41c409; color: #41c409;} 这是根据我们写的模拟数据达到的效果，跟表格已经差不多了。 2. 连接点操作1234567891011121314151617181920212223&lt;template slot-scope=\"scope\"&gt; &lt;el-popover trigger=\"hover\" placement=\"top\"&gt; &lt;p&gt;当前状态为 &lt;span v-if=\"scope.row[`${item.jyjName}-${items}`]==='1'\"&gt;“维持连接”，是否断开？&lt;/span&gt; &lt;span v-if=\"scope.row[`${item.jyjName}-${items}`]==='0'\"&gt;“断开”，是否连接？&lt;/span&gt; &lt;span v-if=\"scope.row[`${item.jyjName}-${items}`]==='2'\"&gt;“新连”，是否断开？&lt;/span&gt; &lt;/p&gt; &lt;div style=\"text-align: center; margin: 0\"&gt; &lt;el-button @click=\"changeStatus( scope.row[`${item.jyjName}-${items}-id`], scope.row[`${item.jyjName}-${items}`])\" type=\"primary\" size=\"mini\"&gt;确定&lt;/el-button&gt; &lt;/div&gt; &lt;div slot=\"reference\" :class=\"{ insertContent: scope.row[`${item.jyjName}-${items}`], holdClass: scope.row[`${item.jyjName}-${items}`] ==='1', offClass: scope.row[`${item.jyjName}-${items}`] ==='0', linkClass: scope.row[`${item.jyjName}-${items}`] ==='2', }\"&gt; {{scope.row[`${item.jyjName}-${items}`]}} &lt;/div&gt; &lt;/el-popover&gt;&lt;/template&gt; 12/*改变状态*/changeStatus(id,status){} 3. 合并单元格、固定列123456789101112&lt;!--合并单元格加 :span-method=\"objectSpanMethod\"--&gt;&lt;el-table :key=\"tableKey\" v-loading=\"loading\" :data=\"fsjFdList\" :span-method=\"objectSpanMethod\" border fit highlight-current-row class=\"ahopeTable\" style=\"width: 100%;margin-top:5px;\"&gt;&lt;/el-table&gt; 我们从表格中可以看出，每10行进行一次合并，所以方法我们可以这么写：123456789101112131415objectSpanMethod({ row, column, rowIndex, columnIndex }) { if (columnIndex === 0) { if (rowIndex % 10 === 0) { return { rowspan: 10, colspan: 1 }; } else { return { rowspan: 0, colspan: 0 }; } }} 123&lt;!--固定列只需加fixed--&gt;&lt;el-table-column label=\"发射机（排号）\" width=\"100\" prop=\"fsjName\" fixed align=\"center\"&gt;&lt;/el-table-column&gt;&lt;el-table-column label=\"编号\" width=\"70\" prop=\"code_fsj\" fixed align=\"center\"&gt;&lt;/el-table-column&gt; 3. 联调接口最终效果： （本文为博主原创文章，转载请附上博文链接！）","link":"/2020/11/15/complicatedTable/"},{"title":"如何解决VPN连接不上问题","text":"最近博主在更新WIN10系统之后遇到一个问题：VPN账号能连接得上，但是实际上不能访问公司内网，后来一查是未分配虚拟ip地址。 话不多说，解决方案： 1.桌面右击“我的电脑”选择管理 2.找到网络适配器，找到“Sangfor SSL VPN CS Support System VNIC”并“卸载设备” 3.点击“操作”→“添加过时硬件”→“下一步”到此页面，双击“网络适配器”→选中“Sangfor SSL VPN CS Support System VNIC”并下一步就完成了。","link":"/2019/07/08/VPNproblem/"},{"title":"Vue + Element 画复杂表格（2）？","text":"上一篇博主讲解了如何用 Vue + Element 画出复杂的表格，今天再讲一个类似的，但是难度没有之前那个表格大，主要整理一下思路。源码：https://github.com/surperJin/vue-element-table 一、需求1. 如下图所示，横竖两个表头，发射机是动态获取的，而发射管是固定的，每台机器都是10条管子。2. 每台机器都可能有多个连接点，直接展示对应连接点的编号。3. 黑色字体为维持连接的状态，绿色为新加连接的状态，断开状态不展示内容。 二、思路1. 实现过程中，最重要的是要 将对象里某个属性的值拆分开，重组装为键。2. 第一条数据：&emsp;&emsp;🅰F01的3号管跟A02的4号管相连，连接状态为1，id为061546545；&emsp;&emsp;🅱F01的5号管跟B01的1号管相连，连接状态为2，id为156546545；&emsp;第二条数据：没有连接点1234567891011121314fsjFdList: [ { fdCode: 'LBPX3000', fdName: '普通300', fsjFsg: ['3-A02-4-1-061546545','5-B01-1-2-156546545'], fsjName: 'F01', }, { fdCode: 'LBPX3000', fdName: '高透100', fsjFsg: [], fsjName: 'F02' }] 三、实现1234567891011121314151617181920212223242526272829303132333435&lt;div class=\"ahopeTableCont\"&gt; &lt;el-table :key=\"tableKey\" v-loading=\"loading\" :data=\"fsjFdList\" border fit highlight-current-row class=\"ahopeTable\" style=\"width: 100%;margin-top:5px;\" &gt; &lt;el-table-column label=\"发射机（牌号）\" prop=\"fsjNAME\" fixed align=\"center\"&gt;&lt;/el-table-column&gt; &lt;el-table-column label=\"发射机发射管号\" align=\"center\"&gt; &lt;el-table-column v-for=\"(item,index) in fsgList\" :key=\"index\" :label=\"item\" width=\"120\" align=\"center\"&gt; &lt;template slot-scope=\"scope\"&gt; &lt;el-popover trigger=\"hover\" placement=\"top\"&gt; &lt;p&gt;当前状态为 &lt;span v-if=\"scope.row[`${item}-status`]==='1'\"&gt;“维持连接”，是否断开？&lt;/span&gt; &lt;span v-if=\"scope.row[`${item}-status`]==='2'\"&gt;“新连”，是否断开？&lt;/span&gt; &lt;/p&gt; &lt;div style=\"text-align: center; margin: 0\"&gt; &lt;el-button @click=\"changeStatus( scope.row[`${item}-id`], scope.row[`${item}-status`])\" type=\"primary\" size=\"mini\"&gt;确定&lt;/el-button&gt; &lt;/div&gt; &lt;div slot=\"reference\" :class=\"{useStyle: scope.row[`${item}-status`] == '2',holdStyle: scope.row[`${item}-status`] == '1'}\" style=\"font-weight: 600;\"&gt; {{scope.row[item]}} &lt;/div&gt; &lt;/el-popover&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table-column&gt; &lt;/el-table&gt;&lt;/div&gt; 123456789101112131415this.fsjFdList.map(o=&gt;{ let obj = {}; o.fsjFsg.forEach(v=&gt;{ //3-A02-4-1-5487851 //3:A02-4 //3-status:1 //3-id:5487851 let arr = v.split('-') obj[`${arr[0]}`] = `${arr[1]}-${arr[2]}` obj[`${arr[0]}-status`] = arr[3] obj[`${arr[0]}-id`] = arr[4] }) Object.assign(o,obj) //对象合并 o.fdCode ? o.fsjNAME = o.fsjName + \"（\" + o.fdName + \"）\" : o.fsjNAME = o.fsjName;})","link":"/2020/11/25/complicatedTable-two/"},{"title":"获取elementUI Table单击的一个单元格的列和行","text":"elementUI Table点击单元格获取该单元格的行和列。123&lt;el-table :cell-class-name=\"tableCellClassName\" @cell-click=\"cellClick\"&gt; ...&lt;/el-table&gt; 1234567891011methods:{ tableCellClassName({row, column, rowIndex, columnIndex}){//注意这里是解构 //利用单元格的 className 的回调方法，给行列索引赋值 row.index=rowIndex; column.index=columnIndex; }, cellClick(row, column, cell, event){ console.log(row.index); console.log(column.index); }} 转载自：https://blog.csdn.net/KangTongShun/article/details/106003678","link":"/2021/03/05/el-clickcell/"},{"title":"如何给“部门”的图标一一对应？","text":"我们有时会遇到给部门添加图标的情况，在部门数目非常多时，不可能每个都写img标签。这时我们可以使用map方法对部门进行遍历,再对图标进行逐一命名，命名规范可以是“信息中心.png”，也可以是“信息中心.jpg”，总之图标的格式要统一。123456&lt;div v-for=\"item of deptList\"&gt; &lt;div @click=\"toSelPersonPage(item)\"&gt; &lt;img :src=\"item.imgUrl\"&gt; {{item.name}} &lt;/div&gt;&lt;/div&gt; 123this.deptList.map(o=&gt;{ this.$set(o, 'imgUrl', require('../../../../images/dept/'+o.name+'.png'))}) this.$set的使用方法：this.$set( target, key, value ) target：要更改的数据源(可以是对象或者数组) key：要更改的具体数据 value：重新赋的值","link":"/2020/12/01/ergodic-denominate/"},{"title":"CSS图片hover效果以及CSS3混合模式","text":"一、鼠标悬停效果无效果HTML123&lt;div&gt; &lt;img src=\"image.jpg\" /&gt;&lt;/div&gt; CSS12345678div{ width: 300px; height: 200px; margin: 0; padding: 0; background: #fff; overflow: hidden;} 放大#112345678910div img { -webkit-transform: scale(1); transform: scale(1); -webkit-transition: .3s ease-in-out; transition: .3s ease-in-out;}div:hover img { -webkit-transform: scale(1.3); transform: scale(1.3);} 放大#2123456789div img { width: 300px; height: auto; -webkit-transition: .3s ease-in-out; transition: .3s ease-in-out;}div:hover img { width: 350px;} 缩小#112345678910div img { -webkit-transform: scale(1.5); transform: scale(1.5); -webkit-transition: .3s ease-in-out; transition: .3s ease-in-out;}div:hover img { -webkit-transform: scale(1); transform: scale(1);} 缩小#2123456789div img { width: 400px; height: auto; -webkit-transition: .3s ease-in-out; transition: .3s ease-in-out;}div:hover img { width: 300px;} 滑动如果要使用的图像宽度大于“要显示的区域+要滑动的距离”，则scale无需指定。12345678910div img { margin-left: 30px; -webkit-transform: scale(1.5); transform: scale(1.5); -webkit-transition: .3s ease-in-out; transition: .3s ease-in-out;}div:hover img { margin-left: 0;} 旋转（+缩小）12345678910div img { -webkit-transform: rotate(15deg) scale(1.4); transform: rotate(15deg) scale(1.4); -webkit-transition: .3s ease-in-out; transition: .3s ease-in-out;}div:hover img { -webkit-transform: rotate(0) scale(1); transform: rotate(0) scale(1);} 模糊12345678910div img { -webkit-filter: blur(3px); filter: blur(3px); -webkit-transition: .3s ease-in-out; transition: .3s ease-in-out;}div:hover img { -webkit-filter: blur(0); filter: blur(0);} 灰度12345678910div img { -webkit-filter: grayscale(100%); filter: grayscale(100%); -webkit-transition: .3s ease-in-out; transition: .3s ease-in-out;}div:hover img { -webkit-filter: grayscale(0); filter: grayscale(0);} 棕褐色12345678910div img { -webkit-filter: sepia(100%); filter: sepia(100%); -webkit-transition: .3s ease-in-out; transition: .3s ease-in-out;}div:hover img { -webkit-filter: sepia(0); filter: sepia(0);} 模糊+灰度12345678910div img { -webkit-filter: grayscale(0) blur(0); filter: grayscale(0) blur(0); -webkit-transition: .3s ease-in-out; transition: .3s ease-in-out;}div:hover img { -webkit-filter: grayscale(100%) blur(3px); filter: grayscale(100%) blur(3px);} 不透明度#112345678div img { opacity: 1; -webkit-transition: .3s ease-in-out; transition: .3s ease-in-out;}div:hover img { opacity: .5;} 不透明度#21234567891011div { background: #1abc9c;}div img { opacity: 1; -webkit-transition: .3s ease-in-out; transition: .3s ease-in-out;}div:hover img { opacity: .5;} 闪烁123456789101112131415161718192021div:hover img { opacity: 1; -webkit-animation: flash 1.5s; animation: flash 1.5s;}@-webkit-keyframes flash { 0% { opacity: .4; } 100% { opacity: 1; }}@keyframes flash { 0% { opacity: .4; } 100% { opacity: 1; }} 闪耀12345678910111213141516171819202122232425262728293031div { position: relative;}div::before { position: absolute; top: 0; left: -75%; z-index: 2; display: block; content: ''; width: 50%; height: 100%; background: -webkit-linear-gradient(left, rgba(255,255,255,0) 0%, rgba(255,255,255,.3) 100%); background: linear-gradient(to right, rgba(255,255,255,0) 0%, rgba(255,255,255,.3) 100%); -webkit-transform: skewX(-25deg); transform: skewX(-25deg);}div:hover::before { -webkit-animation: shine .75s; animation: shine .75s;}@-webkit-keyframes shine { 100% { left: 125%; }}@keyframes shine { 100% { left: 125%; }} 光圈123456789101112131415161718192021222324252627282930313233343536373839404142434445464748div { position: relative;}div::before { position: absolute; top: 50%; left: 50%; z-index: 2; display: block; content: ''; width: 0; height: 0; background: rgba(255,255,255,.2); border-radius: 100%; -webkit-transform: translate(-50%, -50%); transform: translate(-50%, -50%); opacity: 0;}div:hover::before { -webkit-animation: circle .75s; animation: circle .75s;}@-webkit-keyframes circle { 0% { opacity: 1; } 40% { opacity: 1; } 100% { width: 200%; height: 200%; opacity: 0; }}@keyframes circle { 0% { opacity: 1; } 40% { opacity: 1; } 100% { width: 200%; height: 200%; opacity: 0; }} 二、CSS3混合模式css3的混合模式类似于PS中的混合模式，使用：mix-blend-mode 和 background-blend-mode12345678910111213141516171819mix-blend-mode: normal; // 正常mix-blend-mode: multiply; // 正片叠底mix-blend-mode: screen; // 滤色mix-blend-mode: overlay; // 叠加mix-blend-mode: darken; // 变暗mix-blend-mode: lighten; // 变亮mix-blend-mode: color-dodge; // 颜色减淡mix-blend-mode: color-burn; // 颜色加深mix-blend-mode: hard-light; // 强光mix-blend-mode: soft-light; // 柔光mix-blend-mode: difference; // 差值mix-blend-mode: exclusion; // 排除mix-blend-mode: hue; // 色相mix-blend-mode: saturation; // 饱和度mix-blend-mode: color; // 颜色mix-blend-mode: luminosity; // 亮度mix-blend-mode: initial; // 默认mix-blend-mode: inherit; // 继承mix-blend-mode: unset; // 还原 参考：悬停效果：https://www.nxworld.net/tips/css-image-hover-effects.htmlCSS3混合模式：https://www.jianshu.com/p/d2ee896a3d15","link":"/2019/05/01/cssHoverBlend/"},{"title":"致敬《权力的游戏》","text":"&emsp;&emsp;今天博主跟大家分享一部个人非常喜欢的美剧《权力的游戏》。本人是从17年夏天开始迷上这部剧的，并且坠入深渊成为死忠粉——社交账号的头像、手机壁纸以及手机壳等都换上了权游的图案。目前1—7季我已经看完4遍，等第八季开播后开始刷第5遍。（博主是一个不爱说话的人，但是提及《权力的游戏》，我能滔滔不绝~~）&emsp;&emsp;从表面上看，乔治·R·R·马丁的《冰与火之歌》（又名《权力的游戏》）写的是巨龙、战争、政治、背叛与联盟。但马丁曾表明，他的这一系列巨著写的其实是人类的内心冲突——换句话说，所有这些外部事件，都是在创造机会让角色与他们自己的世界观和价值观发生矛盾，并让这些矛盾冲突影响剧情的发展。这也就是这部剧的精彩所在！ 下面简述几个有趣的故事节点： 珊莎·斯塔克——结婚3次 &emsp;&emsp;珊莎·斯塔克是奈德·斯塔克的大女儿。奈德·斯塔克被国王命为国王之手前往君临城辅佐国王治国，同时将珊莎许配给国王的儿子乔弗里；后来“小玫瑰”玛格丽的到来乔弗里取消和珊莎的婚约，珊莎被迫嫁给乔弗里的叔叔“小恶魔”提利昂；在乔弗里被毒死后嫌疑人落在了珊莎头上，逃亡的珊莎又被“小拇指”贝里席出卖给了小剥皮拉姆斯·波顿…… 艾莉亚·斯塔克——走哪儿死哪儿 &emsp;&emsp;艾莉亚·斯塔克是奈德·斯塔克的小女儿。在艾莉亚进君临城不久，她老爹奈德·斯塔克被陷害砍头；随后逃亡至奔流城找她的母亲和大哥，然而当天，母亲和大哥也被杀害；走投无路的艾莉亚在猎狗桑铎·克里冈的“照看”下带到谷地（实际上猎狗想把她带到她姨妈那里拿赎金），然而她姨妈也被杀害…… 布蕾妮——效忠谁谁就死，艾莉亚和珊莎除外 &emsp;&emsp;布蕾妮原本作为彩虹骑士效忠于蓝礼；在蓝礼被杀害后宣誓效忠于对自己有恩的凯特琳（奈德·斯塔克的妻子/艾利亚·斯塔克和珊莎·斯塔克的母亲）；由于凯特琳的嘱托，要求在护送人质弑君者詹姆·兰尼斯特的情况下换回自己的两个女儿艾莉亚和珊莎并保护她们的安全；在凯特琳于奔流城被杀害后，布蕾妮始终守护自己的誓言效忠艾莉亚和珊莎。 “小玫瑰”玛格丽·提利尔——改嫁改嫁再改嫁 &emsp;&emsp;在国王劳勃·拜拉席恩被野猪顶死后，蓝礼（国王的弟弟）自封为王并准备攻打君临城。小玫瑰是蓝礼的妻子，随着蓝礼的死亡，小玫瑰“改嫁”给国王的儿子乔弗里；乔弗里死后又“改嫁”给乔弗里的弟弟托曼……这些“三重奏”看似有意而为之，但在剧中一点儿都不突兀、不冲突。 人物我最喜欢的角色有两个：“小恶魔”提利昂·兰尼斯特和艾莉亚·斯塔克。 &emsp;&emsp;提利昂·兰尼斯特被称为“小恶魔”，在于他是个侏儒。在这样的故事背景下，一个侏儒是不可能存活的。幸运的是，他降生于有权有势的兰尼斯特家族。他是难产出生，他母亲随之死亡，因此他父亲和他姐姐对他怀恨在心。我对他的敬佩在于，提利昂——一个家人讨厌他，外人看他也是个笑话的小男人，偏偏用自己的聪明果敢、能言善辩、明辨是非给观众内心构造了一个强大有力的巨人形象！&emsp;&emsp;艾利亚·斯塔克，原本可以顺理成章的成为贵族小姐——打扮得体、懂得烹饪和穿针引线这种女人该干的活。可她就是不走寻常路，她骑马射箭，她向布拉佛斯首席剑士学习剑术。最终成为一个顶级刺客——无面者！ 你只有看过这部剧，才能感受到它强大的魅力！ （本文为博主原创文章，转载请附上博文链接！）https://jinzhanqi.com/2019/04/21/got/","link":"/2019/04/21/got/"},{"title":"if语句化繁为简","text":"我们经常会在处理数据时碰到需要把某个值转化成中文，那么这么写的话就会显得有点呆😂1234567891011121314151617181920let data = res.data.info;for (let i = 0; i &lt; arr.length; i++) { if (data.status == \"0\") { data.status = \"新建\"; } else if (data.status == \"1\") { data.status = \"组长审批\"; } else if (data.status == \"2\") { data.status = \"经理审批\"; } else if (data.status == \"3\") { data.status = \"主管审批\"; } else if (data.status == \"4\") { data.status = \"审批通过\"; } else if (data.status == \"5\") { data.status = \"退回\"; }}//不过不建议直接改变原数据，可以：if (data.status == \"0\") { data.statusHtml = \"新建\";} 经过简化得到：123456789var htmls={ \"0\":\"新建\", \"1\":\"组长审批\", \"2\":\"经理审批\", \"3\":\"主管审批\", \"4\":\"审批通过\", \"5\":\"退回\",};data.statusHtml= htmls[data.status] || \"\"; 我们也可以加一些应用场景进去：从外部链接或者卡片点击跳转到审批页，如果在该页面中，该环节已经审批过了的话，alert一个信息框，并返回到主页。123456789101112var str=window.location.href; //获取当前页面urlvar statusUrls={ 'ZZSP':'apv_zzsp.html', \"JLSP\":'apv_jlsp.html', \"ZGSP\":'apv_zgsp.html',};// res.nowStatus：接口返回数据（ZZSP/JLSP/ZGSP）if( str.indexOf(statusUrls[res.nowStatus])==-1 ){ alert('审批流程已处理！'); window.location.href='https://index.html'; return;}","link":"/2020/11/27/ifStatementSimp/"},{"title":"在杭州，还有这些地方可以去","text":"&emsp;&emsp;许多人来到杭州都会去西湖，其实除了西湖，杭州还有许许多多的小众景点可以去。此文将列出各个地方的评分以及感受，当然还有很多地方等待博主去探索。 一、云溪竹径体验：⭐⭐⭐⭐🏁 地址：浙江省杭州市西湖区梅灵南路8号💴 门票：8元/人🕒 开放时间：07:30~17:30⌚ 建议游玩时长：2-3小时 &emsp;&emsp;云栖竹径，新西湖十景之九。早在清代雍正时，“云栖梵径”就被列入了当时的“西湖十八景”。云栖“竹径”景观是指云栖坞里林木茂盛的山坞景观：深山古寺，竹径磬声。 今天的云栖坞，翠竹成荫，溪流叮咚，清凉无比。小径蜿蜒深入，潺潺清溪依径而下，娇婉动听的鸟声自林中传出，环境幽静清凉。&emsp;&emsp;石板路两旁翠竹成林，在这里拍照有种古风的感觉。对于每天生活在高压快节奏的人们来说是个修身养性的好去处。 二、白塔公园体验：⭐⭐⭐🏁 地址：浙江省杭州市上城区老复兴街4号附近💴 门票：免费🕒 开放时间：全天⌚ 建议游玩时长：2小时 &emsp;&emsp;杭州白塔公园是西湖文化遗产的实证，是京杭大运河文化遗产的端点，还是108年前杭城第一条铁路的始发站所在。所以完整保留下了当时的铁轨，成为铁路遗产。在这也可以体验绿皮火车，绿皮火车有两列一列是餐厅，还有列是可以在公园里开动的，这个是需要收费的20，这里一年四季都很美，春天有樱花和桃花。文艺又清新，可以拍出日系感。秋天桂花飄香，冬天下雪也很美。所以不管哪个季节来杭州，白塔公园都是不可错过的拍照地点。 三、中国美术学院象山校区体验：⭐⭐⭐🏁 杭州市西湖区转塘镇象山村352号⌚ 建议游玩时长：2小时 &emsp;&emsp;中国美术学院象山校区的建筑风格是整个杭州市中最具特色的建筑风格，整个校园都被浓厚的艺术气息笼罩。因为建筑风格大胆、新奇，非常容易能拍出一套好看的照片。喜欢拍照、喜欢艺术的朋友一定不能错过这里。 四、茅家埠五、小河直街六、凤凰创意国际园七、南星桥八、象山艺术公社体验：⭐⭐🏁 杭州市西湖区转塘街道象山南麓💴 门票：免费🕒 开放时间：全天⌚ 建议游玩时长：1-1.5小时 &emsp;&emsp;象山艺术公社是一所全天候、多形态、开放式的艺术公园，将成为山水、城村互构的艺术人文社区，文化、创意交织的艺术产业公园。 九、东信合创园十、良渚文化村十一、南山路十二、北山路","link":"/2019/11/28/hangZhouTouristSpots/"},{"title":"3种方法迅速实现CSS滚动技能","text":"&emsp;&emsp;隐藏滚动条的同时还需要支持滚动，我们经常在前端开发中遇到这种情况，最容易想到的是加一个iscroll插件，但其实现在CSS也可以实现这个功能，我已经在很多地方使用了，下面一起看看这三种方法。 方法1：计算滚动条宽度并隐藏起来123456789101112131415161718&lt;div class=\"outer-container\"&gt; &lt;div class=\"inner-container\"&gt; ...... &lt;/div&gt;&lt;/div&gt;.outer-container{ width: 360px; height: 200px; position: relative; overflow: hidden; }.inner-container{ position: absolute; left: 0; top: 0; right: -17px; bottom: 0; overflow-x: hidden; overflow-y: scroll; } &emsp;&emsp;这个代码巧妙的向右移动了17个像素，刚好等于滚动条的宽度。这个值是手动调试得来的。在chrome和IE没发现问题。 方法2：使用三个容器包围起来，不需要计算滚动条的宽度&emsp;&emsp;跟上面的思路差不多，只不过人家里面又加多了一个盒子，将内容限制在盒子里面了。这样子就看不到滚动条同时也可以滚动。1234567891011121314151617181920212223&lt;div class=\"outer-container\"&gt; &lt;div class=\"inner-container\"&gt; &lt;div class=\"content\"&gt; ...... &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; .element, .outer-container { width: 200px; height: 200px; }.outer-container { border: 5px solid purple; position: relative; overflow: hidden; }.inner-container { position: absolute; left: 0; overflow-x: hidden; overflow-y: scroll; }.inner-container::-webkit-scrollbar { display: none; } 方法3：css隐藏滚动条不兼容IE，做移动端的可以使用。自定义滚动条的伪对象选择器::-webkit-scrollbarchrome 和Safari123.element::-webkit-scrollbar { width: 0 !important } IE 10+123.element { -ms-overflow-style: none; } Firefox123.element { overflow: -moz-scrollbars-none; } 转载自：http://caibaojian.com/hide-scrollbar.html","link":"/2019/08/22/hiddenScroll/"},{"title":"JS精简代码集合","text":"日历创建过去七天的数组，如果将代码中的减号换成加号，你将得到未来7天的数组集合1[...Array(7).keys()].map(days =&gt; new Date(Date.now() - 86400000 * days)); 生成随机ID生成长度为11的随机字母数字字符串1Math.random().toString(36).substring(2); 获取URL的查询参数获取url的查询参数代码 ‘ ?foo = bar&amp;baz = bing ‘ 期望得到 { foo: bar, baz: bing }123456q={};location.search.replace(/([^?&amp;=]+)=([^&amp;]+)/g,(_,k,v)=&gt;q[k]=v);q;var url = '?foo=bar&amp;baz=bin'var q={}url.replace(/([^?&amp;=]+)=([^&amp;]+)/g,(_,k,v)=&gt;q[k]=v)console.log(q) // {foo: \"bar\", baz: \"bin\"} 本地时间通过一堆HTML，您可以创建一个本地时间，其中包含您可以一口气读出的源代码，它每秒都会用当前时间更新页面1&lt;body = \"setInterval(()=&gt;document.body.innerHTML=new Date().toLocaleString().slice(10,19))\"&gt; &lt;/body&gt; 数组混淆随机更改数组元素顺序，混淆数组12345(arr) =&gt; arr.slice().sort(() =&gt; Math.random() - 0.5)let a = (arr) =&gt; arr.slice().sort(() =&gt; Math.random() - 0.5)let b = a([1,2,3,4,5])console.log(b) 生成随机十六进制代码（生成随机颜色）使用JavaScript简洁代码生成随机十六进制代码，如：#c618b21'#' + Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, '0'); 一个面试题这是一个臭名昭著的面试题，让你写出他的运行结果，受不了~1234567891011//打印1到100这些数字。但是遇到数字为3的倍数的时候，打印“Fizz”替代数字，5的倍数用“Buzz”代替，既是3的倍数又是5的倍数打印“FizzBuzz”。for(i=0;++i&lt;101;console.log(i%5?f||i:f+'Buzz'))f=i%3?'':'Fizz'var y=[];for(i=1;i&lt;101;i++){ if(!(i%3)&amp;&amp;!(i%5)){y.push('FizzBuzz');} else if(!(i%3)){y.push('Fizz');} else if(!(i%5)){y.push('Buzz');} else {y.push(i);}}console.log(y); 数组去重这是一个原生的JS函数但是非常简洁，Set接受任何可迭代对象，如数组[1,2,3,3]，并删除重复项1[...new Set(arr)] 创建特定大小的数组1[...Array(3).keys()] //[0, 1, 2] 转载自：https://juejin.im/post/5cc55eb5e51d456e577f93f0","link":"/2019/08/22/simplifyJScode/"},{"title":"《权力的游戏》的绝美翻译","text":"&emsp;&emsp;看到一个帖子说《权游》（《冰与火之歌》）的翻译问题，总结在一起看，不得不再次感叹，中文真的太精妙了！&emsp;&emsp;书里的地名和姓氏，族语都译得优雅准确，把「信雅达」完完全全的体现出来了，甚至感觉有些翻译过来比原来的简单英文更有美感～&emsp;&emsp;最难得的是，气势居然也配得上这样波澜壮阔的剧情： Winter is Coming——凛冬将至King’s Landing——君临城The Wall——绝境长城Strom’s End——风息堡River Run——奔流城The Twins——孪河城Highgarden——高庭Eastwatch——东海望Sunspear——阳戟城Night’s Watch——守夜人Sword of the Morning——拂晓神剑No One——无面人Ghost—— 白灵Unsullied——无垢者 &emsp;&emsp;各个家族的族语： 龙家 Fire and Blood——血火同源狮家 Hear me Roar——听我怒吼高庭 Growing Strong——生生不息席恩家 We do not Sow——强取胜于苦耕North never Forget——北境永不遗忘As High as Honor——高如荣耀 &emsp;&emsp;精确到各地私生子的姓氏，都很贴合各地的属性： Flower ——佛花（河湾）Hill ——希山（西境）Pyke ——派克（铁群岛）Rivers ——河文（河间）Sand ——沙德（多恩）Snow ——雪诺（北境）Stone ——石东（谷地）Storm ——风暴（风暴地）Waters ——维水（王领） &emsp;&emsp;当然还有守夜人的誓词： Night gathers, and now my watch begins. It shall not end until my death.I shall take no wife, hold no lands, father no children.I shall wear no crowns and win no glory.I shall live and die at my post.I am the sword in the darkness. I am the watcher on the walls. I am the fire that burns against the cold,&gt; the light that brings the dawn, the horn that wakes the sleepers, the shield that guards the realms of men.I pledge my life and honor to the Night’s Watch, for this night and all the nights to come.长夜将至，我从今开始守望，至死方休。我将不娶妻、不封地、不生子。我将不戴宝冠，不争荣宠。我将尽忠职守，生死于斯。我是黑暗中的利剑，长城上的守卫，抵御寒冷的烈焰，破晓时分的光线，唤醒眠者的号角，守护王国的坚盾。我将生命与荣耀献给守夜人，今夜如此，夜夜皆然。 看完，热血翻涌。 出处：（译者为台湾的谭光磊和大陆译者屈畅）内容整理自豆瓣话题 | 只存在于汉语里的精妙词语","link":"/2019/05/09/transOfGot/"},{"title":"给v-for遍历出来的每个元素单独加一个样式","text":"先看官方文档，Class与Style的绑定使用数组语法时，我们可以:12345&lt;div v-bind:class=&quot;[activeClass, errorClass]&quot;&gt;&lt;/div&gt;data: { activeClass: &apos;active&apos;, errorClass: &apos;text-danger&apos;} 渲染为：1&lt;div class=&quot;active text-danger&quot;&gt;&lt;/div&gt; 一、需求1.写一个tab栏；2.v-for循环出来的每个元素加不同的样式；3.点击item有相应的active样式； 二、根据文档，我们可以组合使用class绑定 :class=”[ {active:activeIndex === index}, bg[index] ]” 1234567891011121314151617&lt;div v-for=&quot;(item,index) in tabList&quot; :key=&quot;index&quot; class=&quot;tab-item&quot; @click=&quot;clickTabItem(item,index)&quot; :class=&quot;[{active:activeIndex === index},bg[index]]&quot;&gt; {{item}}&lt;/div&gt;data() { return { tabList: [&apos;全部&apos;,&apos;最热&apos;,&apos;旅行&apos;,&apos;人文&apos;,&apos;打卡圣地&apos;,&apos;建筑&apos;,&apos;街头&apos;], bg:[&apos;all&apos;,&apos;recent&apos;,&apos;travel&apos;,&apos;culture&apos;,&apos;check&apos;,&apos;buildings&apos;,&apos;street&apos;], activeIndex: 0 };}, 1234567891011121314151617181920212223242526.active{ color: #fff; font-weight: bold; text-decoration: underline;}.all{ background-color: #007AFF;}.recent{ background-color: #aaff00;}.travel{ background-color: #00ff00;}.culture{ background-color: #aaaa7f;}.check{ background-color: #55aa7f;}.buildings{ background-color: #5555ff;}.street{ background-color: #ff5500;} 三、效果字体颜色为白色，有下划线的为active样式。","link":"/2021/05/12/v-for-alone-style/"},{"title":"如何在vue项目中使用百度地图，并且计算两点间的里程数？","text":"最近博主做完的一个项目用到了百度地图，有了一些体会和心得，由于是公司的项目，这里只附部分代码来探讨问题。（本次使用vue + vant ui + Bmap） 需求：输入框可以自动检索地点关键字，当起点和终点都有内容时，自动计算出两地里程和所需时间。 1.安装Bmap1npm install vue-baidu-map --save 2.全局引入12345import {BaiduMap, BmControl, BmView, BmAutoComplete, BmLocalSearch, BmMarker} from 'vue-baidu-map';Vue.use(BaiduMap, { /*注册百度地图获得你的ak*/ ak: 'you key'}) 3.组件注册123456789101112export default { data(){ components: { BaiduMap, BmControl, BmView, BmAutoComplete, BmLocalSearch, BmMarker } }} 4.HTML1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556&lt;!--地图--&gt; &lt;baidu-map v-bind:style=\"mapStyle\" class=\"bm-view\" :center=\"center\" :zoom=\"zoom\" :scroll-wheel-zoom=\"true\" @ready=\"handler\" @click=\"getClickInfo\" @moving=\"syncCenterAndZoom\" @moveend=\"syncCenterAndZoom\" @zoomend=\"syncCenterAndZoom\" style=\"position: relative;\"&gt; &lt;bm-view style=\"width: 100%; height:450px;\"&gt;&lt;/bm-view&gt; &lt;!--比例尺--&gt; &lt;bm-scale anchor=\"BMAP_ANCHOR_TOP_LEFT\"&gt;&lt;/bm-scale&gt; &lt;!--缩放--&gt; &lt;bm-navigation anchor=\"BMAP_ANCHOR_TOP_RIGHT\"&gt;&lt;/bm-navigation&gt; &lt;!--定位控件--&gt; &lt;!--&lt;bm-geolocation anchor=\"BMAP_ANCHOR_TOP_RIGHT\" :showAddressBar=\"true\" :autoLocation=\"true\"&gt;&lt;/bm-geolocation&gt;--&gt; &lt;!--路线--&gt; &lt;bm-driving v-if=\"pathShow\" :start=\"valueStartLine\" :end=\"valueEndLine\" :auto-viewport=\"false\" :panel = 'false' policy=\"BMAP_DRIVING_POLICY_LEAST_DISTANCE\" &gt; &lt;/bm-driving&gt; &lt;!--输入框--&gt; &lt;bm-control :offset=\"{width: '10px', height: '10px'}\"&gt; &lt;bm-auto-complete v-model=\"keywordStart\" :sugStyle=\"{zIndex: 999999}\"&gt; &lt;input type=\"text\" :value=\"keywordStart\" @focus=\"focusStrat\" @blur=\"blurStrat\" @input=\"inputStartHandel\" placeholder=\"请输入出发点\" class=\"serachinput serachinput1 b-b-dark fw-400\"&gt; &lt;/bm-auto-complete&gt; &lt;bm-auto-complete v-model=\"keywordEnd\" :sugStyle=\"{zIndex: 999999}\"&gt; &lt;input type=\"text\" :value=\"keywordEnd\" @focus=\"focusEnd\" @blur=\"blurEnd\" @input=\"inputEndHandel\" placeholder=\"请输入目的地\" class=\"serachinput serachinput2 fw-400\"&gt; &lt;/bm-auto-complete&gt; &lt;/bm-control&gt; &lt;bm-local-search :keyword=\"keywordStart\" :auto-viewport=\"true\" @searchcomplete=\"searchStart\" style=\"width:0px;height:0px;overflow:hidden;\"&gt;&lt;/bm-local-search&gt; &lt;bm-local-search :keyword=\"keywordEnd\" :auto-viewport=\"true\" @searchcomplete=\"searchEnd\" style=\"width:0px;height:0px;overflow:hidden;\"&gt;&lt;/bm-local-search&gt; &lt;div style=\"position: absolute;bottom: 45px;width: 22%;line-height: 44px\" class=\"bg-w pl-5 b-b-dark fw-400\"&gt; &lt;van-icon name=\"location-o\" color=\"#eaa62b\"/&gt; &lt;span style=\"font-size: 1rem;padding-left: 3px;\"&gt;出发点&lt;/span&gt; &lt;/div&gt; &lt;div style=\"position: absolute;bottom: 0px;width: 22%;line-height: 46px\" class=\"bg-w pl-5 fw-400\"&gt; &lt;van-icon name=\"location-o\" color=\"#66a9f6\"/&gt; &lt;span style=\"font-size: 1rem;padding-left: 3px;\"&gt;目的地&lt;/span&gt; &lt;/div&gt; &lt;!--以下代码为当光标在输入框时会有历史出行记录，可忽略--&gt; &lt;div v-show=\"HisAddressStartShow\" style=\"z-index: 1000; width: 100%;position: absolute;top: 90%;box-shadow: 0 5px 10px #dbdbdb\" class=\"bg-w pt-10 fw-400\"&gt; &lt;div class=\"font-color-light pl-25\"&gt; &lt;span&gt;历史出行-出发点&lt;/span&gt; &lt;span @click=\"HisAddressStartShow = false\" class=\"float-r pr-25\"&gt;关闭&lt;/span&gt; &lt;/div&gt; &lt;div v-for=\"item of historyStartList\" @click=\"getHistoryAddressStart(item)\" class=\"pb-5 pl-25\"&gt;{{item.origination}}&lt;/div&gt; &lt;/div&gt; &lt;div v-show=\"HisAddressEndShow\" style=\"z-index: 1000; width: 100%;position: absolute;top: 100%;box-shadow: 0 5px 10px #dbdbdb\" class=\"bg-w pt-10 fw-400\"&gt; &lt;div class=\"font-color-light pl-25\"&gt; &lt;span&gt;历史出行-目的地&lt;/span&gt; &lt;span @click=\"HisAddressEndShow = false\" class=\"float-r pr-25\"&gt;关闭&lt;/span&gt; &lt;/div&gt; &lt;div v-for=\"item of historyEndList\" @click=\"getHistoryAddressEnd(item)\" class=\"pb-5 pl-25\"&gt;{{item.destination}}&lt;/div&gt; &lt;/div&gt; &lt;/baidu-map&gt; 5.方法123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566/*地图-起点搜索*/searchStart(e){ if (e){ console.log(e); if (this.flag == &apos;1&apos;){ //flag为1：出发点；flag为2，终点 this.startLng = e.Hr[0].point.lng; this.startLat = e.Hr[0].point.lat; this.keywordStartSearch = e.keyword; this.keywordStartSearch? this.HisAddressStartShow = false:this.HisAddressStartShow = true; } console.log(&apos;起点经度：&apos;+this.startLng+&apos;；起点纬度：&apos;+this.startLat+&apos;；起点关键字：&apos;+this.keywordStartSearch); if(this.keywordStartSearch.length!=0&amp;&amp;this.keywordEndSearch.length!==0){ // 路线距离计算方法 this.pointDeal(); } }},/*地图-终点搜索*/searchEnd(e){ if (e){ if (this.flag == &apos;2&apos;){ //flag为1：出发点；flag为2，终点 this.endLng = e.Hr[0].point.lng; this.endLat = e.Hr[0].point.lat; this.keywordEndSearch=e.keyword; } if(this.keywordStartSearch.length!=0&amp;&amp;this.keywordEndSearch.length!==0){ // 路线距离计算方法 this.pointDeal(); } }},// 路线距离计算方法pointDeal(){ /*获取里程*/ var _this = this; var searchComplete = function (results){ if (transit.getStatus() != BMAP_STATUS_SUCCESS){ return ; } var plan = results.getPlan(0); console.log(plan); output += plan.getDuration(true) + &quot;\\n&quot;; //获取时间 output += &quot;总路程为：&quot; ; output += plan.getDistance(true) + &quot;\\n&quot;; //获取距离 // 赋值给全局变量 _this.outputMileage = Number(plan.getDistance(true).substring(0,plan.getDistance(true).length-2)); _this.outputTime = plan.getDuration(true); }; var output = &apos;&apos;; var map = this.newMap; map.removeOverlay(); var transit = new BMap.DrivingRoute(map, { renderOptions: {map: map}, onSearchComplete: searchComplete, onPolylinesSet: function(){ console.log(output); } } ); transit.search(new BMap.Point(this.startLng, this.startLat) , new BMap.Point(this.endLng, this.endLat)); this.valueStartLine=new BMap.Point(this.startLng, this.startLat); this.valueEndLine=new BMap.Point(this.endLng, this.endLat) this.pathShow = true;}, 6.最终效果 参考：http://lbsyun.baidu.com/jsdemo.htm#i5_5（本文为博主原创文章，转载请附上博文链接！）","link":"/2020/08/16/vue-Bmap/"},{"title":"vue起步","text":"从现在起博主会整理一套vue的学习笔记（不定时更新）。 一、MVVM设计模式传统MVP设计模式： MVVM设计模式：相比之下，MVVM设计模式的优点： 1.低耦合。视图（View）可以独立于Model变化和修改，一个ViewModel可以绑定到不同的”View”上，当View变化的时候Model可以不变，当Model变化的时候View也可以不变。2.可重用性。你可以把一些视图逻辑放在一个ViewModel里面，让很多view重用这段视图逻辑。3.独立开发。开发人员可以专注于业务逻辑和数据的开发（ViewModel），设计人员可以专注于页面设计，使用Expression Blend可以很容易设计界面并生成xaml代码。4.可测试。界面素来是比较难于测试的，而现在测试可以针对ViewModel来写。 二、实例&emsp;&emsp;每一个应用都是通过vue这个构造函数创建根实例（root instance）启动1new vue (选项对象) &emsp;&emsp;需要传入选项对象，对象包括挂载元素、数据、模板、方法等。 el 挂载元素选择器 string/Html Element data 代理数据 object/Function methods 定义方法 object vue代理的data数据：每个vue实例都会代理其data对象里所有属性，这些被代理的属性是响应的。新添加的属性不具备响应功能，改变后不会改变视图。 vue实例自身属性和方法以 $ 开头，如： $el、$data。 三、指令&emsp;&emsp;指令是一种特殊的自定义行间属性。它的职责就是当其表达式的值改变时相应地将某些行为应用到DOM上。在vue中，指令以 v- 开头。 v-bind 动态的绑定数据，简写为 : v-on 绑定事件监听器，简写为 @ v-text 更新数据，会覆盖已有结构 v-html 可以解析数据中的html结构 v-show 根据值的真假，切换元素display属性 v-if 根据值的真假，切换元素会被销毁，重建 v-else-if 多条件判断，为真则渲染 v-else 条件都不符合渲染 v-for 基于源数据多次渲染元素或模板块 v-model 在表单控件元素上创建双向数据绑定 v-pre 跳过元素和子元素的编译过程 v-once 只渲染一次，随后数据更新，不重新渲染 v-cloak 隐藏未编译的Mustache语法，css中设置 [v-cloak] {display:none} 四、事件修饰符&emsp;&emsp;事件处理函数只有纯粹的逻辑判断，不处理DOM事件的细节，例如：阻止冒泡，判断按键… 修饰符的位置：v-on:eventName.修饰符 修饰符： .stop &emsp; .prevent &emsp; .capture &emsp; .self &emsp; .once 按键修饰符： .enter &emsp; .tab &emsp; .delete &emsp; .esc &emsp; .space &emsp; .up &emsp; .down &emsp; .left &emsp; .right &emsp; .ctrl &emsp; .alt &emsp; .shift &emsp; .meta &emsp; .键值","link":"/2019/10/30/vueBasicKnowledge/"},{"title":"一些常用的移动端meta属性","text":"关于移动端 HTML5 meta 标签的属性设置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104&lt;!-- 使用 HTML5 doctype，不区分大小写 --&gt;&lt;!DOCTYPE html&gt;&lt;!-- 更加标准的 lang 属性写法 http://zhi.hu/XyIa --&gt;&lt;html lang=\"zh-cmn-Hans\"&gt;&lt;head&gt; &lt;!-- 声明文档使用的字符编码 --&gt; &lt;meta charset='utf-8'&gt; &lt;!-- 优先使用 IE 最新版本和 Chrome --&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\"/&gt; &lt;!-- 页面描述 --&gt; &lt;meta name=\"description\" content=\"不超过150个字符\"/&gt; &lt;!-- 页面关键词 --&gt; &lt;meta name=\"keywords\" content=\"\"/&gt; &lt;!-- 网页作者 --&gt; &lt;meta name=\"author\" content=\"name, email@gmail.com\"/&gt; &lt;!-- 搜索引擎抓取 --&gt; &lt;meta name=\"robots\" content=\"index,follow\"/&gt; &lt;!-- 为移动设备添加 viewport --&gt; &lt;meta name=\"viewport\" content=\"initial-scale=1, maximum-scale=3, minimum-scale=1, user-scalable=no\"&gt; &lt;!-- `width=device-width` 会导致 iPhone 5 添加到主屏后以 WebApp 全屏模式打开页面时出现黑边 http://bigc.at/ios-webapp-viewport-meta.orz --&gt; &lt;!-- iOS 设备 begin --&gt; &lt;!-- 添加到主屏后的标题（iOS 6 新增） --&gt; &lt;meta name=\"apple-mobile-web-app-title\" content=\"标题\"&gt; &lt;!-- 是否启用 WebApp 全屏模式，删除苹果默认的工具栏和菜单栏 --&gt; &lt;meta name=\"apple-mobile-web-app-capable\" content=\"yes\"/&gt; &lt;!-- 添加智能 App 广告条 Smart App Banner（iOS 6+ Safari） --&gt; &lt;meta name=\"apple-itunes-app\" content=\"app-id=myAppStoreID, affiliate-data=myAffiliateData, app-argument=myURL\"&gt; &lt;!-- 设置苹果工具栏颜色 --&gt; &lt;meta name=\"apple-mobile-web-app-status-bar-style\" content=\"black\"/&gt; &lt;!-- 忽略页面中的数字识别为电话，忽略email识别 --&gt; &lt;meta name=\"format-detection\" content=\"telphone=no, email=no\"/&gt; &lt;!-- 启用360浏览器的极速模式(webkit) --&gt; &lt;meta name=\"renderer\" content=\"webkit\"&gt; &lt;!-- 避免IE使用兼容模式 --&gt; &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt; &lt;!-- 不让百度转码 --&gt; &lt;meta http-equiv=\"Cache-Control\" content=\"no-siteapp\" /&gt; &lt;!-- 针对手持设备优化，主要是针对一些老的不识别viewport的浏览器，比如黑莓 --&gt; &lt;meta name=\"HandheldFriendly\" content=\"true\"&gt; &lt;!-- 微软的老式浏览器 --&gt; &lt;meta name=\"MobileOptimized\" content=\"320\"&gt; &lt;!-- uc强制竖屏 --&gt; &lt;meta name=\"screen-orientation\" content=\"portrait\"&gt; &lt;!-- QQ强制竖屏 --&gt; &lt;meta name=\"x5-orientation\" content=\"portrait\"&gt; &lt;!-- UC强制全屏 --&gt; &lt;meta name=\"full-screen\" content=\"yes\"&gt; &lt;!-- QQ强制全屏 --&gt; &lt;meta name=\"x5-fullscreen\" content=\"true\"&gt; &lt;!-- UC应用模式 --&gt; &lt;meta name=\"browsermode\" content=\"application\"&gt; &lt;!-- QQ应用模式 --&gt; &lt;meta name=\"x5-page-mode\" content=\"app\"&gt; &lt;!-- windows phone 点击无高光 --&gt; &lt;meta name=\"msapplication-tap-highlight\" content=\"no\"&gt; &lt;!-- iOS 图标 begin --&gt; &lt;link rel=\"apple-touch-icon-precomposed\" href=\"/apple-touch-icon-57x57-precomposed.png\"/&gt; &lt;!-- iPhone 和 iTouch，默认 57x57 像素，必须有 --&gt; &lt;link rel=\"apple-touch-icon-precomposed\" sizes=\"114x114\" href=\"/apple-touch-icon-114x114-precomposed.png\"/&gt; &lt;!-- Retina iPhone 和 Retina iTouch，114x114 像素，可以没有，但推荐有 --&gt; &lt;link rel=\"apple-touch-icon-precomposed\" sizes=\"144x144\" href=\"/apple-touch-icon-144x144-precomposed.png\"/&gt; &lt;!-- Retina iPad，144x144 像素，可以没有，但推荐有 --&gt; &lt;!-- iOS 图标 end --&gt; &lt;!-- iOS 启动画面 begin --&gt; &lt;!-- iPad 竖屏 768 x 1004（标准分辨率） --&gt; &lt;link rel=\"apple-touch-startup-image\" sizes=\"768x1004\" href=\"/splash-screen-768x1004.png\"/&gt; &lt;!-- iPad 竖屏 1536x2008（Retina） --&gt; &lt;link rel=\"apple-touch-startup-image\" sizes=\"1536x2008\" href=\"/splash-screen-1536x2008.png\"/&gt; &lt;!-- iPad 横屏 1024x748（标准分辨率） --&gt; &lt;link rel=\"apple-touch-startup-image\" sizes=\"1024x748\" href=\"/Default-Portrait-1024x748.png\"/&gt; &lt;!-- iPad 横屏 2048x1496（Retina） --&gt; &lt;link rel=\"apple-touch-startup-image\" sizes=\"2048x1496\" href=\"/splash-screen-2048x1496.png\"/&gt; &lt;!-- iPhone/iPod Touch 竖屏 320x480 (标准分辨率) --&gt; &lt;link rel=\"apple-touch-startup-image\" href=\"/splash-screen-320x480.png\"/&gt; &lt;!-- iPhone/iPod Touch 竖屏 640x960 (Retina) --&gt; &lt;link rel=\"apple-touch-startup-image\" sizes=\"640x960\" href=\"/splash-screen-640x960.png\"/&gt; &lt;!-- iPhone 5/iPod Touch 5 竖屏 640x1136 (Retina) --&gt; &lt;link rel=\"apple-touch-startup-image\" sizes=\"640x1136\" href=\"/splash-screen-640x1136.png\"/&gt; &lt;!-- iOS 启动画面 end --&gt; &lt;!-- iOS 设备 end --&gt; &lt;!-- Windows 8 磁贴颜色 --&gt; &lt;meta name=\"msapplication-TileColor\" content=\"#000\"/&gt; &lt;!-- Windows 8 磁贴图标 --&gt; &lt;meta name=\"msapplication-TileImage\" content=\"icon.png\"/&gt; &lt;!-- 添加 RSS 订阅 --&gt; &lt;link rel=\"alternate\" type=\"application/rss+xml\" title=\"RSS\" href=\"/rss.xml\"/&gt; &lt;!-- 添加 favicon icon --&gt; &lt;link rel=\"shortcut icon\" type=\"image/ico\" href=\"/favicon.ico\"/&gt; &lt;!-- sns 社交标签 begin --&gt; &lt;!-- 参考微博API --&gt; &lt;meta property=\"og:type\" content=\"类型\" /&gt; &lt;meta property=\"og:url\" content=\"URL地址\" /&gt; &lt;meta property=\"og:title\" content=\"标题\" /&gt; &lt;meta property=\"og:image\" content=\"图片\" /&gt; &lt;meta property=\"og:description\" content=\"描述\" /&gt; &lt;!-- sns 社交标签 end --&gt; &lt;title&gt;标题&lt;/title&gt;&lt;/head&gt; 转载自：https://zhwangart.github.io/2019/04/26/Mobile-html-meta-property-settings/","link":"/2019/08/19/metaArr/"},{"title":"如何调用免费的天气接口获取当地天气状况？","text":"注册完开发账号即可调用，我们来试一下1.请求1234567tianqiapi(data){ return request({ url:'https://tianqiapi.com/api?version=v6&amp;appid=你的APPID&amp;appsecret=你的秘钥', method: 'post', data })} 2.调用拿到返回结果 地址：https://www.tianqiapi.com/index/doc?version=v6","link":"/2020/11/17/weatherApi/"},{"title":"瀑布流布局","text":"code：1234567891011121314151617181920212223242526272829303132&lt;div class=\"root\"&gt; &lt;div class=\"item\"&gt; &lt;img class=\"itemImg\" src=\"https://images.unsplash.com/photo-1621423028651-b32c4e9aaa57?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHw3fHx8ZW58MHx8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60\" alt=\"\"/&gt; &lt;div class=\"userInfo\"&gt; &lt;span class=\"username\"&gt;描述1&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"item\"&gt; &lt;img class=\"itemImg\" src=\"https://images.unsplash.com/photo-1621419079793-73020baef9eb?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHw5fHx8ZW58MHx8fHw%3D&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60\" alt=\"\"/&gt; &lt;div class=\"userInfo\"&gt; &lt;span class=\"username\"&gt;描述2&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"item\"&gt; &lt;img class=\"itemImg\" src=\"https://images.unsplash.com/photo-1621387178623-8ed20c36278b?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwyMHx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60\" alt=\"\"/&gt; &lt;div class=\"userInfo\"&gt; &lt;span class=\"username\"&gt;描述3&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"item\"&gt; &lt;img class=\"itemImg\" src=\"https://images.unsplash.com/photo-1611896154563-70f0a227013a?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxMnx8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60\" alt=\"\"/&gt; &lt;div class=\"userInfo\"&gt; &lt;span class=\"username\"&gt;描述4&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"item\"&gt; &lt;img class=\"itemImg\" src=\"https://images.unsplash.com/photo-1621416945515-7682f934e824?ixid=MnwxMjA3fDB8MHxlZGl0b3JpYWwtZmVlZHwxM3x8fGVufDB8fHx8&amp;ixlib=rb-1.2.1&amp;auto=format&amp;fit=crop&amp;w=500&amp;q=60\" alt=\"\"/&gt; &lt;div class=\"userInfo\"&gt; &lt;span class=\"username\"&gt;描述5&lt;/span&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 12345678910111213141516171819.root { margin: 10px; /* width: 100%; */ column-count: 2; /* column-width: 50%; */ column-gap: 10px;}/* 每一列图片包含层 */.item { margin-bottom: 10px; /* 防止多列布局，分页媒体和多区域上下文中的意外中断 */ break-inside: avoid; background: #fff;}/* 图片 */.itemImg { width: 100%; vertical-align: middle;}","link":"/2021/06/02/waterfall-layout/"},{"title":"vue实例的生命周期","text":"&emsp;&emsp;生命周期函数就是vue实例在某一个时间点会自动执行函数（它并不放在methods里面，而是单独的在vue的实例里） 1&lt;div id=\"app\"&gt;hello world&lt;/div&gt; 12345678910111213141516171819202122232425262728var vm = new Vue({ el: '#app', template:'&lt;div&gt; hello vue &lt;/div&gt;', beforeCreate:function(){ console.log('beforeCreate'); }, created:function(){ console.log('created'); }, beforeMount:function(){ console.log('beforeMount'); }, mounted:function(){ console.log('mounted'); }, beforeDestory:function(){ console.log('beforeDestory'); }, destoryed:function(){ console.log('destoryed'); }, beforeUpdate:function(){ console.log('beforeUpdate'); }, updated:function(){ console.log('updated'); },}) beforeCreate:在基础的初始化（事件&amp;生命周期）之后自动执行的函数； created:在初始化（外部注入、双向绑定、校验等）之后自动执行的函数； 如果有template，就会将template里的内容输出，如果没有，就会将el挂载的标签的内容输出； beforeMount：执行这个函数时页面还未渲染； mounted：执行这个函数时页面已经渲染； beforeDestory、destoryed：这个时候并没有打印出beforeDestory、destoryed，当调用vm.$destory()函数时会执行这两个函数； beforeUpdate、updated：这两个只有在data被修改时会执行。还没有重新渲染之前beforeUpdate会自动执行，当重新渲染之后updated执行。","link":"/2019/11/13/vue-lifecycle/"},{"title":"webpack安装","text":"一、初识webpack&emsp;&emsp;webpack是一个现代JavaScript应用程序的静态模块打包器(module bundler)。当webpack处理应用程序时，它会递归地构建一个依赖关系图(dependency graph)，其中包含应用程序需要的每个模块，然后将所有这些模块打包成一个或多个bundle。&emsp;&emsp;Webpack4相比之前的版本，速度更快，大型项目节约90%构建时间，内置了更多默认配置，变更了许多API。&emsp;&emsp;提升打包速度有两点：1.保证node.js版本尽量新；2.保证webpack版本尽量的新。 不推荐全局安装webpack，假如我有两个项目都用webpack打包，如果全局安装webpack，那它的版本号是固定的。假设我一个项目是通过webpack3.0进行配置的，另一个项目是通过webpack4.0进行配置的，如果全局安装4.0的话，那3.0这个项目是跑不起来的。假设3.0和4.0这两个项目是有依赖的，那么通过全局安装webpack这种方式是不可能运行起来的。 1npm run bundle //打包命令 二、安装 新建一个文件夹“test”，在命令提示符中进入到该文件夹； $npm init 打开package.json，删除main对应的配置项去掉并增加配置项private为true，script对象置为空 1234567891011{ &quot;name&quot;: &quot;test&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;main&quot;: &quot;index.js&quot;, &quot;script&quot;:{ &quot;test&quot;:&quot;echo \\&quot;Error:no test....&quot; }, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;,} 123456789{ &quot;name&quot;: &quot;test&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;&quot;, &quot;private&quot;: true, &quot;script&quot;: {}, &quot;author&quot;: &quot;&quot;, &quot;license&quot;: &quot;ISC&quot;,} 全局安装： 1npm install webpack webpack-cli -g 局部安装：进入项目文件夹 12npm install webpack-cli --save-devnpm install webpack --save-dev 局部安装的webpack查找版本号是找不到的，因为node会从全局找。所以可以用npx来找：npx webpack -v 安装制定版本： 1npm install webpack@4.41.0 webpack-cli -D 三、入口文件在webpack.config.js文件中：1234567891011const path = require(&quot;path&quot;);modele.exports = { mode: &quot;production&quot;, entry:{ main:&quot;./src/index.js&quot; }, output:{ filename:&quot;bundle.js&quot;, path:path.resolve(_dirname,&quot;dist&quot;) }} mode可以设置production或development。mode不设置的话其实和设置为production是一样的，都压缩。只是会有警告，production则不会有警告。development的话不会压缩文件，可以直接在浏览器上打开。","link":"/2019/10/23/webpackInstall/"},{"title":"横向滑动的动态表格","text":"HTML部分123456789101112131415161718&lt;table border=\"1\" class=\"tab_css_1\"&gt; &lt;div&gt; &lt;thead&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;电话&lt;/th&gt; &lt;th&gt;作业内容&lt;/th&gt; &lt;th&gt;证书&lt;/th&gt; &lt;/thead&gt; &lt;tr v-for=\"(item,index) of result\" :key=\"index\" class=\"tr_css\" align=\"center\"&gt; &lt;td&gt;{{item.name}}&lt;/td&gt; &lt;td class=\"fw-300\"&gt;{{item.tel}}&lt;/td&gt; &lt;td&gt; &lt;input type=\"text\" placeholder=\"请输入作业内容\"&gt; &lt;/td&gt; &lt;td&gt;{{item.certificate}}&lt;/td&gt; &lt;/tr&gt; &lt;/div&gt;&lt;/table&gt; CSS部分123456789101112131415161718192021222324252627282930313233343536373839table th{ white-space: nowrap;}table td{ white-space: nowrap;}body,table{ font-size:12px;}table{ empty-cells:show; border-collapse: collapse; margin:0 auto; width: 100%;}h1,h2,h3{ font-size:12px; margin:0; padding:0;}table.tab_css_1{ border:1px solid #cad9ea; color:#666;}table.tab_css_1 th { /*background-image: url(\"th_bg1.gif\");*/ background-repeat:repeat-x; height:30px;}table.tab_css_1 td,table.tab_css_1 th{ border:1px solid #cad9ea; padding:0 1em 0; background-color: #f6fbff;}table.tab_css_1 tr.tr_css{ background-color:#f5fafe; height:30px;}","link":"/2020/11/30/x-scrollTable/"},{"title":"CSS3笔记","text":"一、CSS3简介&emsp;&emsp;如同人类的的进化一样，CSS3是CSS2的“进化”版本，在CSS2基础上，增强或新增了许多特性， 弥补了CSS2的众多不足之处，使得Web开发变得更为高效和便捷。 二、使用手册学会使用工具，可以让我们事半功倍。[] 表示全部可选项|| 表示或者| 表示多选一？ 表示0个或者1个* 表示0个或者多个{} 表示范围 三、选择器&emsp;&emsp;CSS3新增了许多灵活查找元素的方法，极大的提高了查找元素的效率和精准度。CSS3选择器与jQuery中所提供的绝大部分选择器兼容。 3.1 属性选择器 1、E[attr] 表示存在attr属性即可； 2、E[attr=val] 表示属性值完全等于val 3、E[attr ~= val] 表示的一个单独的属性值 这个属性值是以空格分隔的 4、E[attr |= val] 表示的要么一个单独的属性值 要么这个属性值是以“-”分隔的 5、E[attr *= val] 表示的属性值里包含val字符并且在“任意”位置 6、E[attr ^= val] 表示的属性值里包含val字符并且在“开始”位置 7、E[attr $= val] 表示的属性值里包含val字符并且在“结束”位置 3.2 伪类选择器&emsp;&emsp;重点理解E是用来参考确定其父元素的，nth-child(n) 对应根据E元素确定的父元素的所有子元素，nth-of-type(n) 的不同之处在于其对应的是只有E元素，会忽略其子元素。&emsp;&emsp;E:nth-child(n) 第n个子元素，计算方法是E元素的全部兄弟元素&emsp;&emsp;E:nth-of-type(n) 第n个子元素，计算方法只是E元素，会忽略其子元素的&emsp;&emsp;E:nth-last-child(n) 同E:nth-child(n) 计算顺序相反。 倒数第几个&emsp;&emsp;E:nth-last-of-type(n) 同E:nth-of-type(n) 计算顺序相反。 倒数第几个 n遵循线性变化，其取值1、2、3、4、…关于n的取值范围： 1、当n做为一个独立值时，n取值为n&gt;=1，例如nth-child(n) 2、当n做一个系数时，n取值为n&gt;=0者n&lt;0，例如nth-child(2n+1)、nth-child(-n+5) 此处需要理解2n+1或者-n+5做为一个整体不能小于1； 3.2 伪元素选择器E::selection 可改变选中文本的样式1234section:nth-child(3) p::selection { background-color: red; color: blue;} 123456&lt;section&gt; &lt;header&gt;E::selection&lt;/header&gt; &lt;div class=\"wrap-box\"&gt; &lt;p&gt;一大段话一大段话一大段话一大段话一大段话&lt;/p&gt; &lt;/div&gt;&lt;/section&gt; E::placeholder 可改变placeholder默认样式，这个存在明显的兼容问题，比如::-webkit-input-placeholder，具体参考手册进行对比。123section:nth-child(4) input::-webkit-input-placeholder { color: blue;} 123456&lt;section&gt; &lt;header&gt;E::placeholder&lt;/header&gt; &lt;div class=\"wrap-box\"&gt; &lt;input type=\"text\" placeholder=\"我是一个占位符\"&gt; &lt;/div&gt;&lt;/section&gt; E:after、E:before 在旧版本里是伪类，在新版本里是伪元素，新版本下E:after、E:before会被自动识别为E::after、E::before，按伪元素来对待。“:” 与 “::” 区别在于区分伪类和伪元素 四、颜色&emsp;&emsp;新增了RGBA、HSLA模式，其中的A 表示透明度通道，即可以设置颜色值的透明度，相较opacity，不具有继承性，即不会影响子元素的透明度。Red、Green、Blue、Alpha即RGBAHue、Saturation、Lightness、Alpha即HSLAR、G、B 取值范围0~255H 取值范围0~360，0/360表示黑色、120表示绿色、240表示蓝色S 取值范围0%~100%L 取值范围0%~100%A 取值范围0~1关于透明度：1、opacity子元素会继承父元素的透明度，在实际开发中会带来干扰；2、transparent 设置透明 五、文本&emsp;&emsp;文字阴影与边框阴影相似，可分别设置偏移量、模糊度、颜色（可设透明度）。1text-shadow: 2px 2px 8px #000; 分别为左右偏移量、上下、模糊度和颜色 单行文本溢出，需要配合overflow:hidden; white-space: nowrap;自已要多试着理解一下关于white-space的各个属性值之间的差异；&emsp;&emsp;上述方法只能解决单行文本的溢出问题，多行文本溢出处理可参照下面的方法，但是有比较严重的兼容性，需要慎重选择，比较完备的多行溢出需要JS辅助完成，可自行尝试。单行溢出：123&lt;p&gt; 了多少覅较好的尽快决定是否开始思考附件&lt;/p&gt; 1234567p { width: 200px; border: 1px solid #CCC; text-overflow: ellipsis; white-space: nowrap; overflow: hidden;} 多行溢出：123456789p { width: 200px; border: 1px solid #CCC; text-overflow: ellipsis; overflow: hidden; display: -webkit-box; -webkit-line-clamp: 3; /*第几行换行*/ -webkit-box-orient: vertical;} 六、边框&emsp;&emsp;其边框圆角、边框阴影属性，应用十分广泛，兼容性也相对较好，具有符合渐进增强原则的特征，我们需要重点掌握。 6.1 边框圆角&emsp;&emsp;圆角处理时，脑中要形成圆、圆心、长半径、短半径的概念，正圆是椭圆的一种特殊情况。当圆角半径小于或等于边框宽度时，元素内角是直角 拱形1border-radius: 90px 90px 0 0; 半圆12height: 90px;border-radius: 90px 90px 0 0; 左上角1border-radius: 90px 0 0 0; 四分之一圆123width: 90px;height: 90px;border-radius: 90px 0 0 0; 横着的椭圆1234height: 90px;/*border-radius: 50%;*/border-radius: 90px 90px 90px 90px / 45px 45px 45px 45px;/*border-radius: 45px / 90px;*/ 半个竖着的椭圆12width: 45px;border-radius: 45px 0 0 45px / 90px 0 0 90px; 四分之一竖着的椭圆123width: 45px;height: 90px;border-radius: 45px 0 0 0 / 90px 0 0 0; 饼环1234width: 40px;height: 40px;border: 70px solid red;border-radius: 90px; 四边不同色12345width: 0px;height: 0px;border-width: 90px;border-style: solid;border-color: red green yellow blue; 右透明色123456width: 0px;height: 0px;border-width: 90px;border-style: solid;border-color: red green yellow blue;border-right-color: transparent; 圆右透明色1234567width: 0px;height: 0px;border-width: 90px;border-style: solid;border-color: red;border-right-color: transparent;border-radius: 90px; 6.2 边框图片&emsp;&emsp;设置的图片将会被“切割”成九宫格形式，然后进行设置。&emsp;&emsp;“切割”完成后生成虚拟的9块图形，然后按对应位置设置背景，其中四个角位置、形状保持不变，中心位置水平垂直两个方向平铺。round 会自动调整尺寸，完整显示边框图片。repeat 单纯平铺多余部分，会被“裁切”而不显示。 6.3 边框阴影设置边框阴影不会影响盒子的布局，即不会影响其兄弟元素的布局。spread可以与blur、h-shadow、v-shadow相互抵消，blur不可为负值。可以设置多重边框阴影，实现更好的效果，增强立体感。内阴影inset1box-shadow: inset 20px 20px 20px -10px #000; 七、背景&emsp;&emsp;背景在CSS3中也得到很大程度的增强，比如背景图片尺寸、背景裁切区域、背景定位参照点、多重背景等。&emsp;&emsp;cover 会使“最大”边，进行缩放，另一边同比缩放，铺满容器，超出部分会溢出。&emsp;&emsp;contain 会使“最小”边，进行缩放，另一边同比缩放，不一定铺满容器，会完整显示图片。&emsp;&emsp;background-size会以background-clip设定的盒模型计算。 八、渐变&emsp;&emsp;渐变是CSS3当中比较丰富多彩的一个特性，通过渐变我们可以实现许多炫丽的效果，有效的减少图片的使用数量，并且具有很强的适应性和可扩展性。&emsp;&emsp;可分为线性渐变、径向渐变、重复渐变。&emsp;&emsp;线性渐变指沿着某条直线朝一个方向产生渐变效果。&emsp;&emsp;径向渐变指从一个中心点开始沿着四周产生渐变效果1background-image: linear-gradient(yellow, green, red, blue); 用角度或关键字来确定方向12background-image: linear-gradient(45deg, yellow, green, red, blue);/*background-image: linear-gradient(to left top, yellow, green, red, blue);*/ 控制渐变1background-image: linear-gradient(to top, yellow 20%, green 40%, blue); 九、伸缩布局&emsp;&emsp;CSS3在布局方面做了非常大的改进，使得我们对块级元素的布局排列变得十分灵活，适应性非常强，其强大的伸缩性，在响应式开中可以发挥极大的作用，使得开发人员一下子就过上了小康的生活。&emsp;&emsp;伸缩盒模型经历了几次演变，大致分为旧版伸缩布局、过渡伸缩布局、新版伸缩布局，同样为了避免混淆，我们以学习新版伸缩布局为主。 9.1 新版伸缩布局&emsp;&emsp;这里我们需要引入一些新的概念：&emsp;&emsp;主轴：Flex容器的主轴主要用来配置Flex项目。&emsp;&emsp;侧轴：与主轴垂直的轴称作侧轴，是侧轴方向的延伸。&emsp;&emsp;主轴和侧轴并不是固定不变的，通过flex-direction可以调整。&emsp;&emsp;另个两个版本伸缩布局其实现思路与新版基本一致，区别在于其属性及属性值不同，熟练掌握新版伸缩布局后，要参照对比另外两个版本的不同。","link":"/2019/07/22/css3note/"},{"title":"eslint错误提示","text":"Missing semicolon&emsp;&emsp;缺少分号 Use the function form of \\”use strict\\&emsp;&emsp;使用标准化定义function Unexpected space after ‘-’&emsp;&emsp;在’-‘后面不应出现空格 Expected a JSON value&emsp;&emsp;请传入一个json的值 Mixed spaces and tabs&emsp;&emsp;空格和TAB重复 Unsafe character&emsp;&emsp;不安全的字符 Line too long&emsp;&emsp;本行中的字符超过设定的最大长度 Trailing whitespace&emsp;&emsp;本行末尾有过多无用空格 Script URL&emsp;&emsp;脚本URL Unexpected {a} in ‘{b}’&emsp;&emsp;在 ‘{b}’ 中不该出现 {a} Unexpected ‘{a}’&emsp;&emsp;不该在此出现’{a}’ Strings must use doublequote&emsp;&emsp;字符串需要用双引号 Unnecessary escapement&emsp;&emsp;不需要转义 Control character in string: {a}&emsp;&emsp;在字符串中出现了Control的字符 Avoid \\&emsp;&emsp;避免 \\ Avoid \\v&emsp;&emsp;避免 \\v Avoid \\x-&emsp;&emsp;避免 \\x- Bad escapement&emsp;&emsp;错误的转义字符 Bad number ‘{a}’&emsp;&emsp;错误的数字 ‘{a}’ Missing space after ‘{a}’&emsp;&emsp;在’{a}’之后缺少空格 Don’t use extra leading zeros ‘{a}’&emsp;&emsp;不要在’{a}’的前面用多余的0 Avoid 0x-. ‘{a}’&emsp;&emsp;避免使用 0x-. ‘{a}’ A trailing decimal point can be confused with a dot ‘{a}’&emsp;&emsp;在’{a}’中使用点尾随小数点 Unexpected comment&emsp;&emsp;不该在此处出现注释 Unescaped ‘{a}’&emsp;&emsp;没有转义 ‘{a}’ Unexpected control character in regular expression&emsp;&emsp;在正则表达式中出现了control字符 Unexpected escaped character ‘{a}’ in regular expression&emsp;&emsp;在正则表达式中出现了没有转义的字符 ‘{a}’ Expected ‘{a}’ and instead saw ‘{b}’&emsp;&emsp;应该用 ‘{a}’代替’{b}’ Spaces are hard to count. Use &emsp;&emsp;空格难以统计，请使用 Insecure ‘{a}’&emsp;&emsp;不安全的 ‘{a}’ Empty class&emsp;&emsp;空的class Expected a number and instead saw ‘{a}’&emsp;&emsp;应该用数字代替’{a}’ {a}’ should not be greater than ‘{b}’&emsp;&emsp;{a}’不应该比’{b}’大 hasOwnProperty’ is a really bad name&emsp;&emsp;hasOwnProperty’是关键字 ‘{a}’ was used before it was defined&emsp;&emsp;‘{a}’未定义就已经使用了 ‘{a}’ is already defined&emsp;&emsp;‘{a}’被重复定义 A dot following a number can be confused with a decimal point&emsp;&emsp;数字后面的一个点会被误认为是十进制的小数点 Confusing minusses&emsp;&emsp;容易混淆的负数表达- Confusing plusses&emsp;&emsp;容易混淆的正数表达+ Unmatched ‘{a}’&emsp;&emsp;无法匹配的’{a}’ Expected ‘{a}’ to match ‘{b}’ from line {c} and instead saw ‘{d}’&emsp;&emsp;在行{c}中需要用’{a}’和’{b}’匹配，用来代替’{d}’ Unexpected early end of program&emsp;&emsp;程序不可预期的提前终止 A leading decimal point can be confused with a dot: ‘.{a}’&emsp;&emsp;‘{a}’前的点容易混淆成小数点 Use the array literal notation []&emsp;&emsp;使用数组的符号 [] Expected an operator and instead saw ‘{a}’&emsp;&emsp;需要用一个符号来代替’{a}’ Unexpected space after ‘{a}’&emsp;&emsp;在’{a}’之后不能出现空格 Bad line breaking before ‘{a}’&emsp;&emsp;在’{a}’之前错误的换行 Expected ‘{a}’ to have an indentation at {b} instead at {c}&emsp;&emsp;‘{a}’需要在{c}而不是{b}处缩进 Line breaking error ‘{a}’&emsp;&emsp;换行错误 ‘{a}’ Unexpected use of ‘{a}’&emsp;&emsp;此处不能用’{a}’ Bad operand&emsp;&emsp;错误的操作数 Use the isNaN function to compare with NaN&emsp;&emsp;使用isNaN来与NaN比较 Confusing use of ‘{a}’&emsp;&emsp;容易混淆的’{a}’的使用 Read only&emsp;&emsp;只读的属性 ‘{a}’ is a function&emsp;&emsp;‘{a}’是一个函数 Bad assignment&emsp;&emsp;错误的赋值 Do not assign to the exception parameter&emsp;&emsp;不要给额外的参数赋值 Expected an identifier in an assignment and instead saw a function invocation&emsp;&emsp;在赋值的语句中需要有一个标识符，而不是一个方法的调用 Expected an identifier and instead saw ‘{a}’ (a reserved word)&emsp;&emsp;需要有一个标识符，而不是’{a}’(保留字符) Missing name in function declaration&emsp;&emsp;在方法声明中缺少名称 Expected an identifier and instead saw ‘{a}’&emsp;&emsp;需要有一个标识符，而不是’{a}’ Inner functions should be listed at the top of the outer function&emsp;&emsp;内部函数的声明应该放在此函数的顶部 Unreachable ‘{a}’ after ‘{b}’&emsp;&emsp;在’{b}’之后无法获取’{a}’ Unnecessary semicolon&emsp;&emsp;不必要的分号 Label ‘{a}’ on {b} statement&emsp;&emsp;将’{a}’放在{b}的声明中 Label ‘{a}’ looks like a javascript url&emsp;&emsp;‘{a}’看上去像一个js的链接 Expected an assignment or function call and instead saw an expression&emsp;&emsp;需要一个赋值或者一个函数调用，而不是一个表达式 Do not use ‘new’ for side effects&emsp;&emsp;不要用’new’语句 Unnecessary \\”use strict\\”&emsp;&emsp;不必要的\\”use strict\\” Missing \\”use strict\\” statement&emsp;&emsp;缺少\\”use strict\\”的声明 Empty block&emsp;&emsp;空的模块 Unexpected /member ‘{a}’&emsp;&emsp;**不应出现 /元素 ‘{a}’** ‘{a}’ is a statement label&emsp;&emsp;‘{a}’是一个声明 ‘{a}’ used out of scope&emsp;&emsp;‘{a}’使用超出范围 ‘{a}’ is not allowed&emsp;&emsp;不允许使用’{a}’ ‘{a}’ is not defined&emsp;&emsp;‘{a}’没有被定义 Use ‘{a}’ to compare with ‘{b}’&emsp;&emsp;使用’{a}’与’{b}’相比 Variables should not be deleted&emsp;&emsp;变量需要被删除 Use the object literal notation {}&emsp;&emsp;使用对象的文字符号 {} Do not use {a} as a constructor&emsp;&emsp;不要使用{a}作为一个构造对象 The Function constructor is eval&emsp;&emsp;The Function constructor is eval A constructor name should start with an uppercase letter&emsp;&emsp;一个构造对象的名称必须用大写字母开头 Bad constructor&emsp;&emsp;错误的构造对象 Weird construction. Delete ‘new’&emsp;&emsp;构造对象有误，请删除’new’ Missing ‘()’ invoking a constructor&emsp;&emsp;缺少括号() Avoid arguments.{a}&emsp;&emsp;避免参数.{a} document.write can be a form of eval&emsp;&emsp;document.write是eval的一种形式 eval is evil&emsp;&emsp;尽量不要使用eval Math is not a function&emsp;&emsp;Math不是一个函数 Missing ‘new’ prefix when invoking a constructor&emsp;&emsp;此处缺少了’new’ Missing radix parameter&emsp;&emsp;缺少参数 Implied eval is evil. Pass a function instead of a string&emsp;&emsp;传递一个函数，而不是一个字符串 Bad invocation&emsp;&emsp;错误的调用 [‘{a}’] is better written in dot notation&emsp;&emsp;[‘{a}’]最好用点.的方式 Extra comma&emsp;&emsp;多余的逗号 Don’t make functions within a loop&emsp;&emsp;不要用循环的方式创建函数 Unexpected parameter ‘{a}’ in get {b} function&emsp;&emsp;在{b}方法中不该用到参数’{a}’ Duplicate member ‘{a}’&emsp;&emsp;重复的’{a}’ Expected to see a statement and instead saw a block&emsp;&emsp;此处应该是语句声明 Too many var statements&emsp;&emsp;过多var的声明 Redefinition of ‘{a}’&emsp;&emsp;‘{a}’被重复定义 It is not necessary to initialize ‘{a}’ to ‘undefined’&emsp;&emsp;无需将’{a}’初始化为’undefined’ Expected a conditional expression and instead saw an assignment&emsp;&emsp;此处需要一个表达式，而不是赋值语句 Expected a ‘break’ statement before ‘case’&emsp;&emsp;在’case’之前需要有’break’ This ‘switch’ should be an ‘if’&emsp;&emsp;此处’switch’应该是’if’ All ‘debugger’ statements should be removed&emsp;&emsp;请删除’debugger’的语句 ‘{a}’ is not a statement label&emsp;&emsp;‘{a}’不是一个声明标签 Expected an assignment or function call and instead saw an expression&emsp;&emsp;需要一个语句或者一个函数调用，而不是一个表达式 Function declarations should not be placed in blocks. Use a function expression or move the statement to the top of the outer function&emsp;&emsp;函数的声明不能放在类似if的块中，需要放在外部函数的顶部 转载自：https://www.cnblogs.com/lcddjm/p/6595007.html","link":"/2020/01/16/eslintNotice/"},{"title":"HTML5笔记","text":"一、认识HTML5&emsp;&emsp;HTML5并不仅仅只是作为HTML标记语言的一个最新版本，更重要的是它制定了Web应用开发的一系列标准，成为第一个将Web做为应用开发平台的HTML语言。&emsp;&emsp;HTML5定义了一系列新元素，如新语义标签、智能表单、多媒体标签等，可以帮助开发者创建富互联网应用，还提供了一系列Javascript API，如地理定位、重力感应、硬件访问等，可以在浏览器内实现类原生应用，甚至结合Canvas我们可开发网页版游戏，同时结合CSS3的过渡、转换、动画等特性，可以极大的增强用户体验，提升开发功能的可应用性。&emsp;&emsp;我们日常讨论的H5其实是一个泛称，它指的是由HTML5 + CSS3 + Javascript等技术组合而成的一个应用开发平台。 二、语法规范&emsp;&emsp;随着Web技术的更新，HTML也先后经历了HTML 4.01、XHTML 1.0、HTML5几个重要的版本，在版本的演变过程中新增或废弃了一些属性，同时对语法规范也做了一些调整，为了能够保证浏览器可以兼容不同版本语法规范的，我们可以使用&lt;!DOCTYPE&gt;指示浏览器应该如何处理我们的HTML。&emsp;&emsp;通过以上的比较我们可以总结得出HTML5在语法规范上的特点：&emsp;&emsp;1、更简洁&emsp;&emsp;2、更宽松&emsp;&emsp;但是我们在实际开发中应规范书写，不建议太随意 ！并且现在基本所有网站都采用了HTML5的语法规范。（W3C验证地址 https://validator.w3.org/） 三、语义化&emsp;&emsp;所谓语义化是要使HTML标签具备很好的可读性，可以清晰传达每个标签所要表达的意义，以方便其被友好的处理和解析。 3.1 语义化标签&emsp;&emsp;对于语义化标签我们并不陌生，如&lt;p&gt;表示一个段落、&lt;ul&gt;表示一个无序列表&lt;h1&gt; ~ &lt;h6&gt;表示一系列标题等，在此基础上HTML5增加了大量更有意义的语义标签，更有利于搜索引擎或辅助设备来理解HTML页面内容。&emsp;&emsp;传统的做法我们通过添加类名如class=”header”、class=”footer”，使HTML页面具有语义性的，但是不具有通用性（如class=”header”也可能被写成class=”head”）。&emsp;&emsp;HTML5则是通过增加语义化标签的形式来解决这个问题，例如&lt;header&gt;&lt;/header&gt;、&lt;footer&gt;&lt;/footer&gt;等，这样就可以保证其具有通用性。&emsp;&emsp;此章节学习目的为了解增加语义标签的目的，以及各语义标签所表达的意义，在网页布局中能够合理使用标签。 标签 语义 &lt;nav&gt; 导航 &lt;header&gt; 页眉 &lt;footer&gt; 页脚 &lt;section&gt; 区块 &lt;article&gt; 文章 &lt;aside&gt; 侧边栏 &lt;progress&gt; 进度条 &emsp;&emsp;本质上新语义标签与&lt;div&gt;、&lt;span&gt;没有区别，只是其具有语义性，使用时除了在HTML结构上需要注意外，其它和普通标签的使用无任何差别，可以理解成&lt;div class=&quot;nav&quot;&gt;相当于&lt;nav&gt;。不要好奇，它只是一个标签！&emsp;&emsp;尽量避免全局使用header、footer、aside等语义标签。 3.2 兼容处理&emsp;&emsp;在不支持HTML5新标签的浏览器里，会将这些新的标签解析成行内元素(inline)对待，所以我们只需要将其转换成块元素(block)即可使用，但是在IE9版本以下，并不能正常解析这些新标签，但是却可以识别通过document.createElement(‘tagName’)创建的自定义标签，于是我们的解决方案就是将HTML5的新标签全部通过document.createElement(‘tagName’)来创建一遍，这样IE低版本也能正常解析HTML5新标签了，但在实际开发中我们更多采用的是通过检测IE浏览器的版本来加载第三方的一个JS库来解决兼容问题，这个库文件会帮自动通过document.createElement(‘tagName’)创建所有HTML5的新标签。123&lt;!--[if lte IE 8]&gt; &lt;script src=\"./js/html5shiv.min.js\"&gt;&lt;/script&gt;&lt;![endif]--&gt; 3.3 微数据&emsp;&emsp;微数据是在如 span、div 的标签内添加属性，让机器（如搜索引擎）识别其含义，某些特定类型的信息，例如评论、人物信息或事件都有相应的属性，用来描述其含义，可以理解成新语义标签的一种补充。 3.4 WAI-ARIA&emsp;&emsp;WAI-ARIA,是Web Accessibility Initiative - Accessible Rich Internet Applications的缩写，她主要解决的一个问题：让残障人士能无障碍地访问网页上的动态内容。 四、表单&emsp;&emsp;伴随着互联网富应用以及移动开发的兴起，传统的Web表单已经越来越不能满足开发的需求，所以HTML5在Web表单方向也做了很大的改进，如拾色器、日期/时间组件等，使表单处理变的更加高效。 4.1 输入类型 类型 使用示例 含义 email &lt;input type=&quot;email&quot;&gt; 输入邮箱格式 tel &lt;input type=&quot;tel&quot;&gt; 输入手机号码格式 url &lt;input type=&quot;url&quot;&gt; 输入url格式 number &lt;input type=&quot;number&quot;&gt; 输入数字格式 search &lt;input type=&quot;search&quot;&gt; 搜索框（体现语义化） range &lt;input type=&quot;range&quot;&gt; 自由拖动滑块 color &lt;input type=&quot;color&quot;&gt; 拾色器 time &lt;input type=&quot;time&quot;&gt; date &lt;input type=&quot;date&quot;&gt; datetime &lt;input type=&quot;datetime&quot;&gt; month &lt;input type=&quot;month&quot;&gt; week &lt;input type=&quot;week&quot;&gt; 前面5个可以放心大胆使用如果做的是移动端，后面这些也可以放心大胆使用123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354&lt;body&gt; &lt;!-- &lt;input type=\"text\"&gt; &lt;input type=\"password\"&gt; &lt;input type=\"radio\"&gt; &lt;input type=\"checkbox\"&gt; &lt;input type=\"file\"&gt; &lt;input type=\"button\"&gt; &lt;input type=\"submit\"&gt; &lt;input type=\"reset\"&gt; --&gt; &lt;form action=\"\"&gt; &lt;fieldset&gt; &lt;legend&gt;输入类型&lt;/legend&gt; &lt;label for=\"demo\"&gt; email: &lt;input type=\"email\" id=\"demo\"&gt; &lt;/label&gt; &lt;label for=\"\"&gt; tel: &lt;input type=\"tel\"&gt; &lt;/label&gt; &lt;label for=\"\"&gt; url: &lt;input type=\"url\"&gt; //输入的是网址格式，http…… &lt;/label&gt; &lt;label for=\"\"&gt; number: &lt;input type=\"number\" step=\"4\" min=\"8\" max=\"16\"&gt; //输入的必须是数字，如果给参数，step每次加减4，最小值8，最大值16 &lt;/label&gt; &lt;label for=\"\"&gt; search: &lt;input type=\"search\"&gt; &lt;/label&gt; &lt;label for=\"\"&gt; range: &lt;input type=\"range\" value=\"0\"&gt; //滑块，不给值：默认50，中间。给值：相应起点 &lt;/label&gt; &lt;label for=\"\"&gt; color: &lt;input type=\"color\"&gt; &lt;/label&gt; &lt;label for=\"\"&gt; time: &lt;input type=\"time\"&gt; &lt;/label&gt; &lt;label for=\"\"&gt; date: &lt;input type=\"date\"&gt; &lt;/label&gt; &lt;label for=\"\"&gt; datetime: &lt;input type=\"datetime\"&gt; &lt;/label&gt; &lt;label for=\"\"&gt; month: &lt;input type=\"month\"&gt; &lt;/label&gt; &lt;label for=\"\"&gt; week: &lt;input type=\"week\"&gt; &lt;/label&gt; &lt;label for=\"\"&gt; &lt;input type=\"submit\" value=\"提交\"&gt; &lt;/label&gt; &lt;/fieldset&gt; &lt;/form&gt;&lt;/body&gt; 4.2 表单元素 元素 含义 &lt;datalist&gt; 数据列表 &lt;keygen&gt; 生成加密字符串 &lt;output&gt; 输出结果 &lt;meter&gt; 度量器 123456789101112131415161718192021222324252627282930313233343536373839404142434445&lt;body&gt; &lt;form action=\"\"&gt; &lt;label for=\"\"&gt; 姓名：&lt;input type=\"text\" name=\"name\"&gt; &lt;/label&gt; &lt;label for=\"\"&gt; 省份：&lt;select name=\"area\" id=\"\"&gt; &lt;option value=\"1\"&gt;河北省&lt;/option&gt; &lt;option value=\"2\"&gt;山西省&lt;/option&gt; &lt;option value=\"3\"&gt;山东省&lt;/option&gt; &lt;/select&gt; &lt;/label&gt; &lt;label for=\"\"&gt; 个人简介：&lt;textarea name=\"\" id=\"\" cols=\"30\" rows=\"10\"&gt;&lt;/textarea&gt; &lt;/label&gt; &lt;label for=\"\"&gt; 课程：&lt;input type=\"text\" list=\"course\"&gt; //input里面的list属性跟datalist的id一样，这样就对应起来了（假如在输入框中输“p”，那么会出现含有“p”字符的选项,中文也支持）但是datalist兼容性有很大问题 &lt;/label&gt; &lt;datalist id=\"course\"&gt; &lt;option value=\"php\"&gt;&lt;/option&gt; &lt;option value=\"python\"&gt;&lt;/option&gt; &lt;option value=\"photoshop\"&gt;&lt;/option&gt; &lt;option value=\"java\"&gt;&lt;/option&gt; &lt;option value=\"javascript\"&gt;&lt;/option&gt; &lt;option value=\"front end\"&gt;&lt;/option&gt; &lt;option value=\"写代码\"&gt;&lt;/option&gt; &lt;/datalist&gt; &lt;label for=\"\"&gt; 加密类型：&lt;keygen name=\"anquan\"&gt; &lt;/label&gt; &lt;label for=\"\"&gt; 结果：&lt;output&gt;一些结果&lt;/output&gt; //output跟span一样作用 &lt;/label&gt; &lt;label for=\"\"&gt; 度量器：&lt;meter min=\"0\" max=\"100\" low=\"60\" high=\"80\" value=\"50\"&gt;&lt;/meter&gt; //low=\"60\" high=\"80\"，值小于这个范围，为绿色；在范围之间，为黄色；大于范围，为红色 度量器：&lt;meter min=\"0\" max=\"100\" low=\"60\" high=\"80\" value=\"70\"&gt;&lt;/meter&gt; 度量器：&lt;meter min=\"0\" max=\"100\" low=\"60\" high=\"80\" value=\"90\"&gt;&lt;/meter&gt; &lt;/label&gt; &lt;label for=\"\"&gt; &lt;input type=\"submit\" value=\"保存\"&gt; &lt;/label&gt; &lt;/form&gt;&lt;/body&gt; 4.3 表单属性 属性 用法 含义 placeholder &lt;input type=&quot;text&quot; placeholder=&quot;请输入用户名&quot;&gt; 占位符 autofocus &lt;input type=&quot;text&quot; autofocus&gt; 自动获得焦点 multiple &lt;input type=&quot;file&quot; multiple&gt; 多文件上传 autocomplete &lt;input type=&quot;text&quot; autocomplete=&quot;off&quot;&gt; 自动完成 form &lt;input type=&quot;text&quot; form=&quot;某表单ID&quot;&gt; novalidate &lt;form novalidate&gt;&lt;/form&gt; 关闭验证 required &lt;input type=&quot;text&quot; required&gt; 必填项 pattern &lt;input type=&quot;text&quot; pattern=&quot;\\d&quot;&gt; 自定义验证 novalidate：也可以在form里面设置，如果form里面是打开的，这个表单里面某一项是关的，那么就是全体打开，“某一项”关闭。novalidate是没有值的选项，也就是说，比如email属性必须要有@符号，否则是不能提交的，有了novalidate就可以不用验证就提交。autocomplete：&lt;label for=&quot;&quot;&gt;autocomplete: &lt;input type=&quot;text&quot; name=&quot;autocomplete&quot; autocomplete=&quot;on&quot;&gt;&lt;/label&gt;“自动完成”，可以用“on”“off”控制开关，输入name里面的内容后点击按钮提交，下次再输入该内容第一个字母就能显示。pattern:&lt;label for=&quot;&quot;&gt;pattern: &lt;input type=&quot;text&quot; pattern=&quot;\\D+&quot;&gt;&lt;/label&gt;正则表达式：pattern=”\\d+” 表示匹配1个或多个数字;pattern=”\\D+” 表示匹配1个或多个非数字字 五、多媒体&emsp;&emsp;在HTML5之前，在网页上播放音频/视频的通用方法是利用Flash来播放，但是大多情况下，并非所有用户的浏览器都安装了Flash插件，由此使得处理音频/视频播放变的非常复杂，并且移动设备的浏览器并不支持Flash插件。 5.1音频&emsp;&emsp;HTML5通过&lt;audio&gt;标签来解决音频播放的问题。1&lt;audio src=\"./music/See You Again.mp3\" controls autoplay loop=\"3\"&gt;&lt;/audio&gt; autoplay 自动播放controls 是否显不默认播放控件loop 循环播放由于版权等原因，不同的浏览器可支持播放的格式是不一样的。当前，audio元素支持3种音频格式： ogg vorbis mp3 wav IE9 √ firefox3.5 √ √ opera10.5 √ √ chrome3.0 √ √ safari3.0 √ √ 多浏览器支持的方案123456&lt;audio controls&gt; &lt;source src=\"./music/See You Again.mp3\"&gt; &lt;source src=\"./music/See You Again.wav\"&gt; &lt;source src=\"./music/See You Again.ogg\"&gt; &lt;!--浏览器不支持HTML5音频播放--&gt;&lt;/audio&gt; 5.2视频HTML5通过&lt;video&gt;标签来解决音频播放的问题。1&lt;video src=\"./video/movie.mp4\" width=\"800\" controls autoplay loop=\"3\"&gt;&lt;/video&gt; 同样，通过附加属性可以更友好的控制视频的播放autoplay 自动播放controls 是否显示默认播放控件loop 循环播放width 设置播放窗口宽度height 设置播放窗口的高度由于版权等原因，不同的浏览器可支持播放的格式是不一样的 ogg mp4 webm IE9 NO 9.0+ NO firefox 3.5+ NO 4.0+ opera 10.5+ NO 10.6+ chrome 5.0+ 5.0+ 6.0+ safari NO 3.0+ NO 12345&lt;video src=\"\" controls&gt; &lt;source src=\"./video/movie.mp4\"&gt; &lt;source src=\"./video/movie.ogg\"&gt; &lt;!--浏览器不支持HTML5视频播放--&gt;&lt;/video&gt; 六、DOM扩展6.1获取元素 document.getElementsByClassName (‘class’) 通过类名获取元素，以伪数组形式存在。有兼容性问题 document.querySelector(‘selector’) 通过CSS选择器获取元素，符合匹配条件的第1个元素。 document.querySelectorAll(‘selector’) 通过CSS选择器获取元素，以伪数组形式存在。 6.2类名操作 Node.classList.add(‘class’) 添加class Node.classList.remove(‘class’) 移除class Node.classList.toggle(‘class’) 切换class，有则移除，无则添加 Node.classList.contains(‘class’) 检测是否存在class Node指一个有效的DOM节点，是一个通称。 6.3自定义属性&emsp;&emsp;在HTML5中我们可以自定义属性，其格式如下data-*=””，例如：data-info=”我是自定义属性”，通过Node.dataset[‘info’] 我们便可以获取到自定义的属性值。&emsp;&emsp;Node.dataset是以对象形式存在的，当我们为同一个DOM节点指定了多个自定义属性时，Node.dataset则存储了所有的自定义属性的值。&emsp;&emsp;假设某元素 &lt;div id=&quot;demo&quot; data-name=&quot;itcast&quot; data-age=&quot;10&quot;&gt;1var demo = document.querySelector(&apos;#demo&apos;); 1、读取 demo.dataset[‘name’] 或者 demo.dataset[‘age’] 2、设置demo.dataset[‘name’] = ‘web developer’","link":"/2019/06/20/html5note/"},{"title":"摄影拍摄技巧及相机设置","text":"📸拍摄技巧 1.流光溢彩的车流怎么拍？ &emsp;&emsp;首先你要有个三脚架，因为想拍出车流，必须要长时间曝光。推荐使用M档，打开相机的液晶屏，实时取景模式，调整参数到画面不过曝为止。一般拍摄车流，使用ISO100，光圈F8-F11之间，至于曝光时间根据环境亮度来调整。 2.银河星空怎么拍？&emsp;&emsp;拍摄银河，对于入门单反、微单用户，16mm F3.5 iso3200 20s这个参数是绝对可以拍出银河的，前提是光污染小，没有月亮，最好是能肉眼看到银河，这样拍下来绝对没有问题。 3.星轨怎么拍？&emsp;&emsp;由于地球自转的缘故，位于北半球的我们仰望夜空时，除了北极星以外，所有的星星都会明显移动，因此拍摄前，必须先学会辨认北极星的位置。（可以在手机上下载一款APP，诸如“星空地图”之类的）若将镜头中心点对准北极星进行长曝，拍出的星轨会成为同心圆；朝东或朝西会拍出斜线状的星轨，向正南拍则为看不见圆心的弧线。由于地球每小时自转15度，所以曝光时间不同，就会影响星轨的长度。&emsp;&emsp;相机须设定为B快门，并搭配快门线，才能准确掌握曝光时间并确保拍摄品质。由于曝光时间长，相机电池续航力、噪点等问题都要特别注意。镜头焦段以广角镜、标准镜为佳；脚架须稳固，不宜过轻；此外，要特别注意云台的长时间承载能力是否足够。&emsp;&emsp;夜间长曝时，要随时注意周遭环境，若有其他光源进入画面，可用黑卡暂时遮挡镜头暂停曝光，但不能遮太久，以免星轨遭破坏无法连续。拍摄期间若有流云飘过，也会遮挡住星光而干扰画面；流云太厚或是停留时间太长，影响也就越大。 4.星芒效果怎么拍？&emsp;&emsp;使用小光圈，比如F22。 5.拍静止小东西的特写&emsp;&emsp;拍静止的小东西的特写，如花、鸟、虫：用A档，光圈最好在f5.6或以下，焦距最好50以上，尽量在1m以内拍摄，使背景虚化！光线好的话，iso100，光线不好的话，iso最好400以内。 6.拍人&emsp;&emsp;基本都是使用较大的光圈（f5.6以内）、50mm以上的焦距，拍摄距离视全身、半身、大头照而定，使背景虚化，使用A档！光线好，iso100，光线不好，iso400以内。 7.拍剪影&emsp;&emsp;逆光，对着亮处点测光，通常400感光度，曝光补偿剪二档 8.拍雨丝&emsp;&emsp;拍雨风斜出动感（大风斜雨效果好）大圈慢速背景暗（大光圈，快门速度1/30左右，采用暗背景）焦雨正比夜光好（焦距大，雨丝长；焦距小，雨丝短。利用夜光拍摄效果好）。逆光远摄借叶檐（用逆光，摄距适当远一点，借用叶子雨伞、房檐滴水和地面积水反光）。 9.拍雪飘&emsp;&emsp;快门1/30左右，焦距定在中短段，光圈设置8-11，深色背景显动感 10.拍雪景&emsp;&emsp;拍雪关键测曝光亮白补偿二三档（白增黑减：+2-3补偿）巧设前景忌顺光（设前景增加色彩对比，最好用逆光和侧逆光）拍人点测对脸上（如雪景里拍人，对人脸点测光）。 11.拍霞光&emsp;&emsp;拍霞圈8测云空（对着较亮的天空和云彩测光）负一补偿设前景（白增黑减：-1补偿）。朝霞早来晚霞晚（拍朝霞要在太阳升出地平线之前，晚霞落太阳之后，不宜太早和太晚）遇到水光拍倒影。 12.测光方式&emsp;&emsp;1）测光不要对着天空，不要对着最暗的地方.要去抓中间值。&emsp;&emsp;2）依照你拍的题材，善用测光模式(权衡测光.点测光.中央重点测光…)。&emsp;&emsp;3）若遇到测光抓不准的时候，请对身边灰色的东西曝光锁定后再来拍摄。&emsp;&emsp;4）尽量别对白色或黑色物体测光，不然就请记得黑要减EV、白要加EV。EV 即曝光补偿，曝光补偿也是一种曝光控制方式，一般常见在±2-3EV左右，如果环境光源偏暗，即可增加曝光值(如调整为+1EV、+2EV)以突显画面的清晰度。&emsp;&emsp;拍摄环境比较昏暗，需要增加亮度，而闪光灯无法起作用时，可对曝光进行补偿，适当增加曝光量。进行曝光补偿的时候，如果照片过暗，要增加EV值，EV值每增加1.0，相当于摄入的光线量增加一倍，如果照片过亮，要减小EV值，EV值每减小1.0，相当于摄入的光线量减小一倍。&emsp;&emsp;被拍摄的白色物体在照片里看起来是灰色或不够白的时候，要增加曝光量，简单的说就是“越白越加”，这似乎与曝光的基本原则和习惯是背道而驰的，其实不然，这是因为相机的测光往往以中心的主体为偏重，白色的主体会让相机误以为很环境很明亮，因而曝光不足，这也是多数初学者易犯的通病。&emsp;&emsp;由于相机的快门时间或光圈大小是有限的，因此并非总是能达到2EV的调整范围，因此曝光补偿也不是万能的，在过于暗的环境下仍然可能曝光不足，此时要考虑配合闪光灯或增加相机的ISO感光灵敏度来提高画面亮度。 一般的说，景物亮度对比越小，曝光越准确，反之则偏差加大。&emsp;&emsp;总而言之，曝光补偿的调节是经验加上对颜色的敏锐度所决定的，用户一定要多比较不同曝光补偿下的图片质量，清晰度、还原度和噪点的大小，才能拍出最好的图片。 13.画面布置&emsp;&emsp;见山寻侧光&emsp;&emsp;见水拍倒影&emsp;&emsp;有云天要多&emsp;&emsp;无云地七成&emsp;&emsp;黄金分割线&emsp;&emsp;主体交点行📸相机设置 1.优化校准&emsp;&emsp;一般使用“标准”就可以，建议将“标准”的锐度调+3，对比+1，饱和度+1,这样可以使照片“更锐”，拍人像时建议锐度调+4，风景建议锐度调+7。 2.D-Lighting&emsp;&emsp;关闭建议在大光比环境下使用高动态HDR，是按照不同曝光拍多张照片，再进行合成，效果要好的多，不过有可能会颜色失真。 3.M档&emsp;&emsp;如果你是出去旅游或者是要随时抓拍的情况，就尽量不要用M档了，改用A档，因为A档是光圈优先，你只用调整光圈，机器会自动调整快门速度达到Ev平衡，使你的照片很少欠爆过爆。 4.测光&emsp;&emsp;一般情况下，白天用范围或者中央评价测光就可以，夜晚最好用点测光。 5.ISO&emsp;&emsp;此值越大，快门就会越快，ISO提高一倍，快门就快一倍。但是噪点就会增加，白天400，室内1600-以上，夜晚6400都不会有太大问题，噪点控制还是很不错的！ 6.光圈&emsp;&emsp;此值越大，所产生的光圈越小，那么光圈越大，说明光线能更多的到达cmos上，也就能得到更快的快门，光圈大一倍，快门也会快一倍。同时，大光圈，会得到浅景深，也就是说背景虚化越厉害。另外，光圈的定义是建立在人眼是1.0的基础上计算的。一般来说，拍摄风景时，光圈都要在f8-f11之间，近景要f4左右。 7.焦距&emsp;&emsp;焦段越小，拍摄的画面场景越大，反之场景越小。同时，随着焦段的增加，景深越小，背景也更容易虚化。📸后期&emsp;&emsp;LR（用了lightroom就会知道其实废片也能变大片）&emsp;&emsp;PS（在必要的时候可以用Photoshop清除一些杂物或者矫正水平）&emsp;&emsp;Snapseed（手机APP，如果在外拍摄没有电脑的情况下可以用这个修图）","link":"/2019/08/23/photographySet/"},{"title":"vue组件","text":"目录 ◽ 组件使用中的细节◽ 父子组件的数据传递◽ 组件参数校验与非props特性◽ 给组件绑定原生事件◽ 非父子组件间的传值（bus/总线/发布订阅模式/观察者模式）◽ 在vue中使用插槽◽ vue中的作用域插槽◽ 动态组件与v-once指令 一、组件使用中的细节1.1123456789&lt;div id=\"app\"&gt; &lt;table&gt; &lt;tbody&gt; &lt;row&gt;&lt;/row&gt; &lt;row&gt;&lt;/row&gt; &lt;row&gt;&lt;/row&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt; 123456Vue.component('row',{ template:'&lt;tr&gt;&lt;td&gt;this is a row&lt;/td&gt;&lt;/tr&gt;'});var vm = new Vue({ el:'#app',}) &emsp;&emsp;在页面中可以把内容展示出来，但是在控制台中：12345678&lt;div id=\"app\"&gt; &lt;tr&gt;&lt;td&gt;this is a row&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;this is a row&lt;/td&gt;&lt;/tr&gt; &lt;tr&gt;&lt;td&gt;this is a row&lt;/td&gt;&lt;/tr&gt; &lt;table&gt; &lt;tbody&gt;&lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt; &emsp;&emsp;并没有在table标签里面反而跑到了外面，因为在h5的规范里面要求table里面是tbody，tbody里面必须放tr。而我们写成了子组件row，所以浏览器解析的时候就会出问题。解决方案：&emsp;&emsp;使用vue的is属性（虽然这里写的是tr，但是实际上是row，这样既能保证里面写的是我们的组件，又能保证符合h5的编码规范）1&lt;tr is=\"row\"&gt;&lt;/tr&gt; 1.2123456789&lt;div id=\"app\"&gt; &lt;table&gt; &lt;tbody&gt; &lt;tr is=\"row\"&gt;&lt;/tr&gt; &lt;tr is=\"row\"&gt;&lt;/tr&gt; &lt;tr is=\"row\"&gt;&lt;/tr&gt; &lt;/tbody&gt; &lt;/table&gt;&lt;/div&gt; 1234567891011Vue.component('row',{ data:function () { return { content:'this is a row' } }, template:'&lt;tr&gt;&lt;td&gt;{{ content }}&lt;/td&gt;&lt;/tr&gt;'});var vm = new Vue({ el:'#app',}) &emsp;&emsp;在子组件定义data必须是个函数而不能是一个对象。之所以这么设计，因为一个子组件不像根组件只会被调用一次。每一个子组件它的数据不希望和其他子组件产生冲突，通过一个函数来返回一个对象的目的是让每一个子组件都拥有一个独立的数据存储。避免多个子组件之间互相影响。 1.3 ref引用&emsp;&emsp;此demo效果是实现数字计数，第三个数字是前两个数字相加的和。12345&lt;div id=\"app\"&gt; &lt;counter ref=\"one\" @change=\"changeHandel\"&gt;&lt;/counter&gt; &lt;counter ref=\"two\" @change=\"changeHandel\"&gt;&lt;/counter&gt; &lt;div&gt;{{ total }}&lt;/div&gt;&lt;/div&gt; 12345678910111213141516171819202122232425Vue.component('counter',{ template:\"&lt;div @click='clickHandel'&gt;{{ number }}&lt;/div&gt;\", data:function () { return{ number:0 } }, methods:{ clickHandel:function () { this.number++; this.$emit('change'); //每次触发clickHandel，$emit就是子组件会给父组件一个信号，去触发changeHandel事件 } }});var vm = new Vue({ el:'#app', data:{ total:'' }, methods: { changeHandel:function () { this.total = this.$refs.one.number + this.$refs.two.number; //this.$refs.名字获取到的是标签对应的dom元素 } }}) 二、父子组件的数据传递12345&lt;div id=\"root\"&gt; &lt;!--父组件向子组件传递了一个叫count的数据--&gt; &lt;counter :count=\"0\"&gt;&lt;/counter&gt; &lt;counter :count=\"1\"&gt;&lt;/counter&gt;&lt;/div&gt; 123456789101112131415var counter = { //局部组件 props: ['count'], //子组件接受count的格式 template: '&lt;div @click=\"clickHandel\"&gt;{{count}}&lt;/div&gt;', methods:{ clickHandel:function () { this.count ++ } }};var vm = new Vue({ el:\"#root\", components:{ //需要注册一下局部组件 counter:counter }}) &emsp;&emsp;当点击实现累加时候控制台会出现警告:Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: &quot;count&quot; &emsp;&emsp;那是因为改变了父组件传过来的数据。在vue中有一个单向数据流的概念：父组件可以向子组件传递参数，通过属性的形式传，传递的参数可以随便修改；但是子组件绝对不能反过来去修改父组件传递过来的这个参数。 &emsp;&emsp;解决方案：1234567891011121314var counter = { //局部组件 props: ['count'], //子组件接受count的格式 data:function(){ return{ number: this.count } }, template: '&lt;div @click=\"clickHandel\"&gt;{{number}}&lt;/div&gt;', methods:{ clickHandel:function () { this.number ++ } }}; 改进：1234567&lt;div id=\"root\"&gt; &lt;!--父组件向子组件传递了一个叫count的数据--&gt; &lt;!--@change监听子组件传过来的数据--&gt; &lt;counter :count=\"0\" @change=\"changeHandel\"&gt;&lt;/counter&gt; &lt;counter :count=\"1\" @change=\"changeHandel\"&gt;&lt;/counter&gt; &lt;div&gt; {{ total }} &lt;/div&gt;&lt;/div&gt; 1234567891011121314151617181920212223242526272829var counter = { //局部组件 props: ['count'], //子组件接受count的格式 data:function(){ return{ number: this.count } }, template: '&lt;div @click=\"clickHandel\"&gt;{{number}}&lt;/div&gt;', methods:{ clickHandel:function () { this.number ++; this.$emit('change',1); //1传给父组件 } }};var vm = new Vue({ el:\"#root\", components:{ //需要注册一下局部组件 counter:counter }, data:{ total:5 }, methods: { changeHandel:function (step) { //step接收$emit里面的参数 this.total+=step } }}) 三、组件参数校验与非props特性3.1 组件参数校验123&lt;div id=\"root\"&gt; &lt;child content=\"hello jin\"&gt;&lt;/child&gt;&lt;/div&gt; 1234567891011121314Vue.component('child',{ // props:['content'], props:{ content:{ type: String, //这种格式写法父组件传给子组件的参数给了约束，必须要以字符串形式 required: false, //为true时content是必传的，如果为false，可传可不传，相当于required不写 default: '这是默认值', //当content不传时，default为默认值 } }, template: \"&lt;div&gt;{{ content }}&lt;/div&gt;\"});var vm = new Vue({ el: '#root',}) 12345678910content:{ type: String, //这种格式写法父组件传给子组件的参数给了约束，必须要以字符串形式 required: false, //为true时content是必传的，如果为false，可传可不传，相当于required不写 default: '这是默认值', //当content不传时，default为默认值 //对传过来的content进行校验，如果它的长度大于5，返回true；小于5，返回false，报错 validator: function (value) { return (value.length &gt; 5) }} 3.2 非props特性&emsp;&emsp;当父组件向子组件传递了一个属性，但是子组件并没有声明props这块内容（没有声明父组件到传递过来的内容），这个时候会报错。实际开发当中非props特性用的并不是很多。123&lt;div id=\"root\"&gt; &lt;child content=\"hello jin\"&gt;&lt;/child&gt;&lt;/div&gt; 123456Vue.component('child',{ template: \"&lt;div&gt;{{ content }}&lt;/div&gt;\"});var vm = new Vue({ el: '#root',}) &emsp;&emsp;如果这个时候template里面不是写差值表达式而是写死，那么在控制台里面的html结构里面&lt;div content=&quot;hello jin&quot;&gt;你好&lt;/div&gt;，属性是会展示在子组件的标签里面123&lt;div id=\"root\"&gt; &lt;child content=\"hello jin\"&gt;&lt;/child&gt;&lt;/div&gt; 123456Vue.component('child',{ template: \"&lt;div&gt;你好&lt;/div&gt;\"});var vm = new Vue({ el: '#root',}) 四、给组件绑定原生事件123&lt;div id=\"root\"&gt; &lt;child @click=\"clickHandel\"&gt;&lt;/child&gt;&lt;/div&gt; 12345678910111213141516Vue.component('child',{ template: \"&lt;div @click='clickChildHandel'&gt;child&lt;/div&gt;\", methods: { clickChildHandel:function () { this.$emit('click') } }});var vm = new Vue({ el: '#root', methods:{ clickHandel:function () { alert(123) } }}) &emsp;&emsp;这样包裹两层太麻烦了，想要直接监听原生事件可以用native修饰符：123&lt;div id=\"root\"&gt; &lt;child @click.native=\"clickHandel\"&gt;&lt;/child&gt;&lt;/div&gt; 1234567891011Vue.component('child',{ template: \"&lt;div&gt;child&lt;/div&gt;\",});var vm = new Vue({ el: '#root', methods:{ clickHandel:function () { alert(123) } }}) 五、非父子组件间的传值（bus/总线/发布订阅模式/观察者模式）12345&lt;div id=\"root\"&gt; &lt;!--这两个child不是父子组件的关系，是兄弟间的关系--&gt; &lt;child content=\"will\"&gt;&lt;/child&gt; &lt;child content=\"jin\"&gt;&lt;/child&gt;&lt;/div&gt; 123456789101112131415161718192021222324252627Vue.prototype.bus = new Vue();Vue.component('child',{ data:function(){ return { selfContent: this.content } }, props: { content: String }, template: '&lt;div @click=\"clickHandel\"&gt;{{ selfContent }}&lt;/div&gt;', methods:{ clickHandel:function () { this.bus.$emit('change',this.selfContent) } }, mounted:function () { var this_ = this; this.bus.$on('change',function (msg) { this_.selfContent = msg; }) }});var vm = new Vue({ el: '#root'}) 六、在vue中使用插槽&emsp;&emsp;通过插槽我们可以方便的向子组件传递dom元素，同时子组件使用插槽slot就可以了。12345&lt;div id=\"root\"&gt; &lt;child&gt; &lt;p&gt;jin&lt;/p&gt; &lt;/child&gt;&lt;/div&gt; 123456789Vue.component('child',{ template: `&lt;div&gt; &lt;p&gt;你好&lt;/p&gt; &lt;slot&gt;默认内容&lt;/slot&gt; &lt;/div&gt;`});var vm = new Vue({ el: \"#root\"}) &emsp;&emsp;插槽有一个，具名插槽可以有多个123456&lt;div id=\"root\"&gt; &lt;child&gt; &lt;div class=\"header\" slot=\"header\"&gt;header&lt;/div&gt; &lt;div class=\"footer\" slot=\"footer\"&gt;footer&lt;/div&gt; &lt;/child&gt;&lt;/div&gt; 12345678910Vue.component('child',{ template: `&lt;div&gt; &lt;slot name=\"header\"&gt;默认内容&lt;/slot&gt; &lt;p&gt;你好&lt;/p&gt; &lt;slot name=\"footer\"&gt;默认内容&lt;/slot&gt; &lt;/div&gt;`});var vm = new Vue({ el: \"#root\"}) 展示效果：header你好footer 七、vue中的作用域插槽&emsp;&emsp;当子组件循环或者某一部分dom结构应该由外部传递进来的时候需要用到作用域插槽。作用域插槽必须是在template标签里面的，且从子组件接受的数据都放在slot-scope里。当子组件用slot的时候，slot传递一个item这样的一个数据，数据放在了slot-scope的jin里面（可以自定义取名）。1234567&lt;div id=\"root\"&gt; &lt;child&gt; &lt;template slot-scope=\"jin\"&gt; &lt;li&gt;{{jin.item}}&lt;/li&gt; &lt;/template&gt; &lt;/child&gt;&lt;/div&gt; 123456789101112131415Vue.component('child',{ data:function(){ return{ list:[1, 2, 3, 4] } }, template: `&lt;div&gt; &lt;ul&gt; &lt;slot v-for=\"item of list\" :item=\"item\"&gt;&lt;/slot&gt; &lt;/ul&gt; &lt;/div&gt;`});var vm = new Vue({ el:'#root'}) 八、动态组件与v-once指令点击按钮实现child-one和child-two的toggle效果12345&lt;div id=\"root\"&gt; &lt;child-one v-if=\"type === 'child-one'\"&gt;&lt;/child-one&gt; &lt;child-two v-if=\"type === 'child-two'\"&gt;&lt;/child-two&gt; &lt;button @click=\"clickHandel\"&gt;change&lt;/button&gt;&lt;/div&gt; 1234567891011121314151617Vue.component('child-one',{ template:'&lt;div&gt;child-one&lt;/div&gt;'});Vue.component('child-two',{ template:'&lt;div&gt;child-two&lt;/div&gt;'});var vm = new Vue({ el: \"#root\", data:{ type: 'child-one' }, methods:{ clickHandel:function () { this.type = this.type === 'child-one' ? 'child-two':'child-one' } }}) 动态组件的方式：&emsp;&emsp;component标签是vue里面自带的标签，它指的就是一个动态组件。它的is属性绑定type，type为child-one，他就展示child-one，销毁掉child-two这个组件；而每次切换的时候，底层都会销毁一个组件，这种操作耗费了一定的性能。这个时候用v-once，当child-one第一次被渲染的时候，它就会被放到内存里面，当切换时child-two被放进内存，这样就直接从内存里拿出来就可以了。所以v-once指令可有效提高一些静态内容的展示效率。1234&lt;div id=\"root\"&gt; &lt;component :is=\"type\"&gt;&lt;/component&gt; &lt;button @click=\"clickHandel\"&gt;change&lt;/button&gt;&lt;/div&gt; 1234567891011121314151617Vue.component('child-one',{ template:'&lt;div v-once&gt;child-one&lt;/div&gt;'});Vue.component('child-two',{ template:'&lt;div v-once&gt;child-two&lt;/div&gt;'});var vm = new Vue({ el: \"#root\", data:{ type: 'child-one' }, methods:{ clickHandel:function () { this.type = this.type === 'child-one' ? 'child-two':'child-one' } }})","link":"/2019/11/26/vue-component/"},{"title":"webpack核心概念","text":"一、loader&emsp;&emsp;loader就是一个打包的方案，在打包的过程中，webpack不认识非.js后缀的这些模块，但是loader知道对于某一个特定的文件（如.jpg）该如何打包。那么在配置项中file:loader就会帮助它来打包这些静态文件，同时会在dist文件夹下生成这些文件。 1.1 安装1npm install file-loader -D 1.2配置1234567891011121314151617181920module.export{ mode: 'development', entry: { main: './src/index.js' }, module: { rules:[ { test:/\\.txt$/, use: { loader: 'file-loader' } } ] }, output: { filename: 'bundle.js', path: path.resolve(__dirname,'dist') }} 1.3 option没有option配置项时打包生成的文件名为哈希值，加上option时：name:'[name].[ext]'代表打包出的结果，图片为原本的名字.后缀名name:'[name]_[hash].[ext]'代表打包出的结果，图片为原本的名字_哈希值.后缀名 1.4 file-loader&emsp;&emsp;当遇到jpg png gif这样的文件时，用file-loader打包，输出路径为images，到时候会在dist目录下生成一个images的文件夹。12345678910111213141516171819module.export{ mode: 'development', entry: { main: './src/index.js' }, module: { rules:[ { test: /\\.txt$/, use: { loader: 'file-loader', option: { name: '[name]_[hash].[ext]' } } } ] }} 1.5 url-loader&emsp;&emsp;可以用url-loader代替file-loader的功能（安装：npm install url-loader -D），用url-loader打包是可以看到网页内容的，又不需要去找文件路径，少了一次http请求，（但是打包的时候，dist目录下没有图片文件，打开index.html却能看到图片，那是因为打包的时候把图片转成了base64）但是如果图片文件很大，打包生成的bundle.js文件也会相应很大，这样页面加载时候会很慢，那么正确使用url-loader的方式是什么呢？1234567891011121314module: { rules:[ { test:/\\.(jpg|png|gif)$/, use: { loader: 'url-loader', option: { name: '[name]_[hash].[ext]', outputPath: 'images/' } } } ]} 1.6 limit&emsp;&emsp;在option里面配置limit，当图片小于10240字节（10KB）时使用url-loader以base64形式打包到js文件里面，当大于10KB时用file-loader打包。123456789101112131415module: { rules:[ { test:/\\.(jpg|png|gif)$/, use: { loader: 'url-loader', option: { name: '[name]_[hash].[ext]', outputPath: 'images/', limit: 10240 } } } ]} 1.7 style-loader、css-loader、sass-loader&emsp;&emsp;打包CSS文件，同样的，webpack不认识css后缀的文件，所以要在webpack.package.js里面去配置。 &emsp;&emsp;安装style-loader和css-loader：1npm install style-loader css-loader -D 1234567891011121314151617181920212223242526module.export{ mode: 'development', entry: { main: './src/index.js' }, module: { rules:[ { test: /\\.txt$/, use: { loader: 'file-loader', option: { name: '[name]_[hash].[ext]' } } }, { test: /\\.css$/, use:[ 'style-loader', 'css-loader' ] } ] }} &emsp;&emsp;如果是sass这种比较新潮的样式文件的话安装sass-loader和node-loader12345678{ test: /\\.scss$/, use:[ 'style-loader', 'css-loader', 'scss-loader', ]} &emsp;&emsp;现在我们已经有3个loader了，在webpack的配置里，loader是有先后顺序的，它的执行顺序是：从下到上，从右到左。所以当我们去打包一个scss文件时，首先会执行sass-loader，对代码翻译成css，给到css-loader，处理好后给style-loader挂载到页面上。 1.8 postcss-loader&emsp;&emsp;有时候我们会写transform：translate(100px,100px)这样的样式，一般这样的样式都会有厂商前缀，比如-webkit-，那在加了postcss-loader之后，就不需要我们手动写了，它会自动把它添加上去。安装：1npm install postcss-loader -D postcss要求我们在目录下创建一个postcss.config.js文件并安装autoprefixer这样的一个插件：1npm i autoprefixer -D 123456789{ test: /\\.scss$/, use:[ 'style-loader', 'css-loader', 'scss-loader', 'postcss-loader', ]} 📁postcss.config.js12345module.exports = { plugins: [ require('autoprefixer') ]} 1.9 importLoaders&emsp;&emsp;有时候会在scss文件里再引用一个scss文件（简称第二文件），在第一文件处理完后第二文件便直接从css-loader开始，到style-loader，这样的话就跳过postcss-loader和sass-loader了。123456789101112131415161718192021222324252627282930313233module.export{ mode: 'development', entry: { main: './src/index.js' }, module: { rules:[ { test: /\\.txt$/, use: { loader: 'file-loader', option: { name: '[name]_[hash].[ext]' } } }, { test: /\\.css$/, use:[ 'style-loader', { loader: 'css-loader', options:{ importLoaders: 2 } }, 'scss-loader', 'postcss-loader' ] } ] }} &emsp;&emsp;所以要把css-loader写在一个对象里面，并在里面配置importLoaders:2，意思是第二文件也要从postcss-loader和sass-loader开始编译。123456789101112use:[ 'style-loader', { loader: 'css-loader', options:{ importLoaders: 2, modules: true } }, 'scss-loader', 'postcss-loader'] modules: true开启css的模块化打包，避免全局导入时对样式的影响。 1.10 打包字体123456{ test: /\\.(eot|ttf|svg)$/, use:[ 'file-loader' ]} 不需要option配置 二、使用plugins插件打包文件更便捷2.1安装：1npm install html-webpack-plugin -D 2.2 htmlwebpackplugin&emsp;&emsp;htmlwebpackplugin这个插件会在打包结束后，自动生成一个html文件，并把打包生成的js自动引入到这个html文件中。 📁webpack.config.js1const HtmlWebpackPlugin = require('html-webpack-plugin'); plugin可以在webpack运行到某个时刻的时候，帮你做一些事情1234567891011121314151617181920212223242526272829303132333435363738module.export{ mode: 'development', entry: { main: './src/index.js' }, module: { rules:[ { test: /\\.txt$/, use: { loader: 'file-loader', option: { name: '[name]_[hash].[ext]' } } }, { test: /\\.css$/, use:[ 'style-loader', { loader: 'css-loader', options:{ importLoaders: 2 } }, 'scss-loader', 'postcss-loader' ] } ] }, plugins:[ new HtmlWebpackPlugin({ template: 'src/index.html' }) ],} 2.3 clean-webpack-plugin&emsp;&emsp;有时候我们打包后会留下上次打包在dist里的内容，如果想要覆盖，用clean-webpack-plugin就可以了，他是第三方插件，在官网上找不到文档。在打包执行之前运行 安装：1npm install clean-webpack-plugin -D 📁webpack.config.js1const CleanWebpackPlugin = require('clean-webpack-plugin'); 123456plugins:[ new HtmlWebpackPlugin({ template: 'src/index.html' }), new CleanWebpackPlugin(['dist'])] 三、Entry 与 Output 的基础配置&emsp;&emsp;它会在打包生成的index.html中把main.js和sub.js放进去，是因为之前在打包配置文件里面使用了htmlwebpackplugin1234567891011module.export{ mode: 'development', entry: { main: './src/index.js' sub: './src/index.js' }, output:{ filename: '[name].js', path: path.resolve(__dirname,'dist') }} 12&lt;script type=\"text/javascript\" src=\"main.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"sub.js\"&gt;&lt;/script&gt; 如果我想要在打包之后注入的js前面带一个域名，可以用publicPath配置项123output:{ publicPath: 'http://cdn.com.cn'} 打包之后所有引入的js前面都带有域名了12&lt;script type=\"text/javascript\" src=\"http://cdn.com.cn/main.js\"&gt;&lt;/script&gt;&lt;script type=\"text/javascript\" src=\"http://cdn.com.cn/sub.js\"&gt;&lt;/script&gt; 四、SourceMap的配置4.1 SourceMap&emsp;&emsp;在mode为development时，默认SourceMap时被配进去了，主动关闭SourceMap：devtool:'none'&emsp;&emsp;如想打包后出现报错，要想知道src目录下的文件哪一行代码出错而不是打包文件dist下的哪一行出错，例： 当前index.js文件中的第一行出错 现在知道dist目录下main.js文件第96行出错，SourceMap是一个映射关系，它知道dist目录下main.js文件第96行的出错实际上对应的是src目录下index.js文件中的第一行1234567module.export{ mode: 'development', devtool: 'source-map' entry: { main: './src/index.js' }} &emsp;&emsp;它会生成一个map文件，他的内容是一种编码方式，用来对应文件的映射关系。 4.2 inline-source-map用inline-source-map的话，就不会在dist中生成这样的map文件，而是直接以base64形式放在了dist中的main.js的底部。1devtool: 'inline-source-map' 4.3 cheap-inline-source-map&emsp;&emsp;当我们遇到代码量很大的时候，inline-source-map会告诉我们错误会精确的告诉我们在第几行第几列，但是这样的一个映射比较耗费性能，代码出错了，我只希望你告诉我在第几行就可以，如果是cheap-inline-source-map，那么久不会把错误的第几行第几列告诉我们了，这样就可以在一定程度上提升打包的性能。1devtool: 'cheap-inline-source-map' 4.4 cheap-module-inline-source-map不仅管业务代码的错误，还管loader等一些插件上的代码错误cheap-module-inline-source-map1devtool: 'cheap-module-inline-source-map' 4.5 eval&emsp;&emsp;eval一样也可以找到错误第几行，main.js底部不会有map的编码，取而代之的是1eval(\"console.log('hello world');\\n\\n//# sourceURL=webpack....\") 这样一种形式。eval这种方式是执行效率最快的，性能最高的打包方式，但是针对于比较复杂的代码用eval提示出来的内容可能并不全面。 所以最佳的使用方式是：如果在开发环境中（development），建议使用devtool:cheap-module-eval-source-map； 如果把代码放到线上环境了（production），建议使用devtool:cheap-module-source-map； 五、使用 WebpackDevServer 提升开发效率5.1 安装1npm run watch &emsp;&emsp;webpack watch会监听我们打包的文件，只要他要打包的源文件代码发生变化，就会自动的重新打包，从而提升打包效率。安装WebpackDevServer：1npm install webpack-dev-server -D 123devServer:{ contentBase: './dist'} 1234\"scripts\":{ \"watch\": \"webpack --watch\", \"start\": \"webpack-dev-server\"} 运行：npm run strat，此时会有一个localhost &emsp;&emsp;WebpackDevServer相较于webpack watch，不但一样可以监听到源文件代码的变化，重新帮我们打包，它还会自动刷新浏览器，更方便地提升开发效率。1234devServer:{ contentBase: './dist' open: true} open是指自动打开一个浏览器，自动地访问地址http：//localhost:8080 六、Hot Module Replacement 热模块更新它可以在我们写css的时候方便我们调试CSS1234567devServer:{ contentBase: './dist', open: true, port: 8080, hot: true, hotOnly: true} 📁webpack.config.js1const webpack = require('webpack'); 1234567plugins:[ new HtmlWebpackPlugin({ template: 'src/index.html' }), new CleanWebpackPlugin(['dist']), new webpack.HotModuleReplacementPlugin()] &emsp;&emsp;我们都知道webpack-dev-server在代码改变之后它会自动打包并刷新页面，那有时候我们只更改了样式代码，所以用HotModuleReplacementPlugin就直接把更改的CSS代码给渲染到页面上而不会整一个重新自动打包并刷新页面了，这样就很方便调试。 在配置好之后最好重启一下命令npm run start 例：counter模块里面的js代码是点击数字累加1；number模块里面的代码是显示数字1000；想要实现的效果是当点击数字1，累加到10，这时改变数字1000为2000，在页面上不重新刷新，10还是10,1000已经变为200012345678910111213import counter from './counter';import number from './number';counter();number();//如果配置了HotModuleReplacementPlugin，这个时候还需要正在index.js写判断语句if (module.hot){ modele.hot.accept('./number',()=&gt;{ document.body.removeChild(document.getElementById('number')) number(); })} 七、使用 Babel 处理 ES6 语法 bable可以将js语法书写的代码（ES6）输出为浏览器兼容的代码（ES5） 7.1 安装：1npm install --save-dev babel-loader @bable/core 在webpack.config.js中的rules加一条：📁webpack.config.js12345module:{ rules:[ {test:/\\.js$/,exclude:/node_modules/,loader:\"bable-loader\"} ]} &emsp;&emsp;exclude表示如果你的js文件在node_modules里面，就不使用bable-loader了，因为node_modules里面的代码是第三方的代码，没必要对这些第三方代码进行ES6→ES5的操作，其实第三方早就已经帮我们做好了这一步。所以文件在src目录下的，就会使用bable-loader 7.2 preset-envpreset-env包含了所有ES6→ES5的规则安装：1npm install @bable/preset-env --save-dev 配置：123456789101112module: { rules:[ { test: /\\.js$/, exclude: /node_modules/, loader: \"bable-loader\", options:{ presets:[\"@bable/preset-env\"] } } ]} &emsp;&emsp;preset-env语法翻译只是翻译了一部分，虽然箭头函数已经变成普通函数的形式了，但是像map这种方法并不能让所有的浏览器兼容。所以这个时候我们需要借助polyfill帮我们对低版本浏览器的补充。 7.3 polyfill安装：1npm install --save @bable/polyfill 📁 src &emsp;index.js1import \"@bable/polyfill\" 这个时候在presets里配置useBuiltIns : 'usage'，这样的话就用哪个打包哪个，没有用到map函数，就不会把map函数翻译出来，这样就会减小打包体积。123456789101112module: { rules:[ { test: /\\.js$/, exclude: /node_modules/, loader: \"bable-loader\", options:{ presets:[[\"@bable/preset-env\"],{useBuiltIns:'usage'}] } } ]} &emsp;&emsp;假如运行在Chrome浏览器上，由于Chrome浏览器67以上的版本很好的支持了ES6，再转换成ES5没有意义，当版本大于67时不用preset-env打包。123456789options:{ presets:[ [\"@bable/preset-env\"], {useBuiltIns:'usage'}, targets:{ chrome:\"67\" } ]}","link":"/2019/10/31/webpackCore/"}],"tags":[{"name":"总结","slug":"总结","link":"/tags/总结/"},{"name":"麦理浩径","slug":"麦理浩径","link":"/tags/麦理浩径/"},{"name":"博客搭建","slug":"博客搭建","link":"/tags/博客搭建/"},{"name":"日常问题","slug":"日常问题","link":"/tags/日常问题/"},{"name":"element-ui","slug":"element-ui","link":"/tags/element-ui/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"权力的游戏","slug":"权力的游戏","link":"/tags/权力的游戏/"},{"name":"JavaScript","slug":"JavaScript","link":"/tags/JavaScript/"},{"name":"杭州","slug":"杭州","link":"/tags/杭州/"},{"name":"CSS3","slug":"CSS3","link":"/tags/CSS3/"},{"name":"VUE","slug":"VUE","link":"/tags/VUE/"},{"name":"meta","slug":"meta","link":"/tags/meta/"},{"name":"webpack4","slug":"webpack4","link":"/tags/webpack4/"},{"name":"HTML5","slug":"HTML5","link":"/tags/HTML5/"},{"name":"摄影","slug":"摄影","link":"/tags/摄影/"},{"name":"uni-app","slug":"uni-app","link":"/tags/uni-app/"}],"categories":[{"name":"总结","slug":"总结","link":"/categories/总结/"},{"name":"旅行","slug":"旅行","link":"/categories/旅行/"},{"name":"博客","slug":"博客","link":"/categories/博客/"},{"name":"开发","slug":"开发","link":"/categories/开发/"},{"name":"前端","slug":"前端","link":"/categories/前端/"},{"name":"影视","slug":"影视","link":"/categories/影视/"},{"name":"百度地图","slug":"百度地图","link":"/categories/百度地图/"},{"name":"摄影","slug":"摄影","link":"/categories/摄影/"}]}